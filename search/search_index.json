{"config":{"lang":["en","nl"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Fri3d Camp 2024 Badge en Addons","text":"<p>Update je Badge!</p> <p>Zoek je info voor een van deze borden? Klik dan onmiddellijk door naar die pagina.</p>"},{"location":"#spelen","title":"Spelen!","text":"<p>Je moet geen programmeer-goochelaar te zijn om leuke dingen te doen! Op de Onboarding pagina zie je de dingen die standaard al ingebouwd zijn. Je kan ook doorklikken naar de gaming pagina</p> <p></p>"},{"location":"#programmeren","title":"Programmeren","text":"<p>Je kan jouw badge op verschillende manieren programmeren:</p> <ul> <li>Je kan C++ in de Arduino editor, of Visual Studio Code</li> <li>Wie liever Python programmeert, kan gelijk welke tekst editor gebruiken, maar Visual Studio Code geeft je wel wat extras.</li> <li>Om je badge te laten babbelen met je smart home is er esphome. Je kan de command line gebruiken of het esphome dashboard.</li> <li>Als je liever niet typt, kan je blokjes slepen met bipes, een beetje zoals Scratch</li> </ul>"},{"location":"#reset-standaard-firmware","title":"Reset Standaard Firmware","text":"<p>Start je badge niet meer op of wil je terug naar de originele software gaan. Wandel dan even naar de badge / soldeer tent waar je het badge repair station zal vinden. Op deze PC kan je stapsgewijze instructies volgen om alle borden terug te flashen. Of zie hier hoe je ze zelf kan resetten</p>"},{"location":"#documentatie","title":"Documentatie","text":"<ul> <li>Introductie</li> <li>De hardware</li> <li>C++ voorbeelden</li> <li>Voorge\u00efnstalleerde Firmware</li> </ul>"},{"location":"reset/","title":"Flashing","text":"<p>Als je programmeer-avonturen bizarre resultaten hebben opgeleverd, kan het zijn dat je wil teruggaan naar de originele software...</p>"},{"location":"reset/#fri3d-camp-reset-booth","title":"Fri3d Camp Reset Booth","text":"<p>Tijdens Fri3d Camp, bij de \"Badge EHBO\" helpen we jou met plezier terug op weg! Zoek naar de \"badge reset firmware\" booth op het kamp. We hebben alles voorzien :-)</p>"},{"location":"reset/#web-interface","title":"Web interface","text":"<p>De online flasher app werkt enkel met browsers gebaseerd op chrome(Chrome of Edge, niet Firefox of Safari).</p> <ol> <li>download de meest recente <code>full_webflasher_*.zip</code> van https://github.com/Fri3dCamp/badge_firmware/releases</li> <li>ga naar https://fri3d-flasher.vercel.app/</li> <li>klik op het icoon om de zip file te uploaden die je zonet hebt gedownload</li> <li>klik op de \"begin te flashen\" knop</li> </ol> <p>Als het flashen mislukt omdat je badge elke zoveel seconden reset, kan je ze als volgt \"forceren\" om te luisteren naar een nieuwe upload:</p> <ol> <li>Klik en houd de \"start\" knop in(Op ESP32 heet dit de \"boot button\")</li> <li>Klik en laat de \"reset\" knop los</li> <li>Je badge staat nu in \"download\" mode tot je opnieuw reset duwt</li> </ol> <p>Je badge start nu in de default Fri3d App.</p>"},{"location":"reset/#esp-idf","title":"ESP-IDF","text":"<p>Dit is de ingewikkelde versie en is het enkel waard als de web flasher niet werkt.</p> <ol> <li>Als je badge om de paar seconden spontaan reset, kan je ze als volgt \"forceren\" om te luisteren naar een nieuwe upload:<ol> <li>Klik en houd de \"start\" knop in (Op ESP32 heet dit de \"boot button\")</li> <li>Klik en laat de \"reset\" knop los</li> <li>Je badge staat nu in \"download\" mode tot je opnieuw reset duwt</li> </ol> </li> <li>installeer ESP-IDF https://docs.espressif.com/projects/esp-idf/en/stable/esp32/get-started/index.html#installation</li> <li>Download de meest recente firmware op https://github.com/Fri3dCamp/badge_2024_micropython</li> <li>in de command line interface, type:<pre><code>python -m esptool -p (PORT) -b 460800 --before default_reset --after no_reset --chip esp32s3 write_flash --flash_mode dio --flash_size 16MB --flash_freq 80m 0x0 bootloader.bin 0x8000 partition-table.bin 0x1d000 ota_data_initial.bin 0x30000 micropython.bin\n</code></pre> </li> </ol>"},{"location":"Retro--Go-Gaming/","title":"Retro-Go Gaming","text":"<p>Retro-Go is een programma om oude (maar goeie!) spelletjes op ESP32-gebaseerde toestellen te spelen, zoals de Fri3d Camp 2024 Badge. Het project bestaat uit een \"lanceerder\" en een selectie van de beste applicaties en emulators, serieus geoptimaliseerd om minder CPU, geheugen en opslag nodig te hebben, zonder minder compatibel te zijn!</p>"},{"location":"Retro--Go-Gaming/#bediening","title":"Bediening","text":""},{"location":"Retro--Go-Gaming/#algemene-knoppen","title":"Algemene knoppen","text":"<ul> <li><code>RESET</code>: herstart de huidige app</li> <li><code>START+MENU</code> samen: Ga uit Retro-Go, terug naar de Fri3d App</li> </ul>"},{"location":"Retro--Go-Gaming/#knoppen-in-de-lanceerder","title":"Knoppen in de lanceerder","text":"<ul> <li><code>Menu</code>: Vorige scherm</li> <li><code>Start</code>: Volgende scherm</li> <li><code>X</code>: \"Opties\" menu:<ul> <li>Volume van het geluid</li> <li>Audio out: \"Buzzer\" die op de badge zit (stil en lage kwaliteit) of \"Ext(ernal) DAC\" voor de Communicator of andere externe luidsprekers</li> <li>Wi-Fi opties:<ul> <li>Wi-Fi Access Point: activeer deze, verbind met de hotspot en surf naar http://192.168.4.1/ om de bestanden op de badge te beheren</li> </ul> </li> </ul> </li> <li><code>Y</code>: Menu met \"Find games\" om te zoeken op de badge van je vrienden naar spelletjes die jij nog niet hebt</li> <li><code>A</code>: Actie</li> <li><code>B</code>: Terug</li> <li>Boven/Onder: menuinstelling selecteren</li> <li>Links/Rechts: menuinstelling aanpassen</li> </ul>"},{"location":"Retro--Go-Gaming/#knoppen-in-nes-en-gameboy-color-spelletjes","title":"Knoppen in NES en Gameboy (Color) spelletjes","text":"<ul> <li><code>Start</code>: Start</li> <li><code>Menu</code>: Select (bijna nooit nodig)</li> <li><code>A</code> en <code>B</code>: spelknoppen</li> </ul>"},{"location":"Retro--Go-Gaming/#knoppen-in-doom","title":"Knoppen in Doom","text":"<ul> <li><code>Menu</code>: Wissel van wapen</li> <li><code>Start</code>: Gebruik (deur, knop, schakelaar)</li> <li><code>X</code>: Opties menu</li> <li><code>Y</code>: Spel Menu</li> <li><code>A</code>: Schieten (of slaan)</li> <li><code>B</code>: Snel of zijwaarts lopen</li> </ul>"},{"location":"Retro--Go-Gaming/#sd-kaartje-of-intern-opslaggeheugen","title":"SD Kaartje of intern opslaggeheugen","text":"<p>De badge zal proberen de micro SD kaart (geformatteerd als FAT) te gebruiken en als dat niet lukt, het interne opslaggeheugen.</p> <p>Als je een nieuwe micro SD kaart insteekt, is het aangeraden om dit eerst te vullen met de laaste nieuwe <code>default_files_config_and_games.zip</code> van de releases pagina zodat je alle juiste standaard instellingen hebt, zoals de wifi netwerken.</p>"},{"location":"Retro--Go-Gaming/#spelletjes-zoeken","title":"Spelletjes zoeken","text":"<p>Als je graag wil zoeken naar spelletjes die je nog niet hebt op de badge van een vriend, dan kan dat rechtstreeks, zonder dat je een laptop of SD kaartlezer nodig hebt!</p> <p>Het werkt in 3 stappen:</p> <p>1) je vriend zet zijn hotspot aan (X knop -&gt; \"Wi-Fi options\" -&gt; \"Wi-Fi Access Point\" en kies er eentje, bijvoorbeeld \"retro-go-channel-3\")</p> <p> </p> <p>2) jij verbindt met zijn hotspot (X knop -&gt; \"Wi-Fi options\" -&gt; \"Wi-Fi select\" -&gt; \"retro-go-channel-3\" die je vriend koos)</p> <p> </p> <p>3) jij zoekt naar spelletjes (Y knop -&gt; \"Find games\" -&gt; kies een map)</p> <p> </p> <p>Dit kan even duren, maar als je het beu bent kan je het altijd stoppen door je badge te herstarten. Mocht er een fout optreden, probeer dan eens opnieuw - hij slaat spelletjes over die je al hebt.</p> <p>Tip: Zet de beste paar spelletjes in een mapje <code>/roms/nes/best</code>, <code>/roms/gb/best</code> of <code>/roms/gbc/best</code> en zet je zelfgemaakte spelletjes in <code>/roms/gbc/gbstu</code> zodat je die gemakkelijk kan terugvinden.</p>"},{"location":"Retro--Go-Gaming/#zelf-spelletjes-maken","title":"Zelf spelletjes maken","text":"<p>Met GBStudio kan je zelf eenvoudig verschillende soorten spelletjes maken voor GameBoy Color. Als je op YouTube zoekt naar 'GBStudio' vind je een hele goeie playlist van filmpjes die je snel alles leren wat je moet weten.</p>"},{"location":"Retro--Go-Gaming/#over-retro-go","title":"Over Retro-Go","text":"<p>Retro-go heeft zelf ondersteuning voor de Fri3d Camp 2024 Badge maar de afgeleide versie retro-go-fri3d bevat een pak meer toeters en bellen die te specifiek zijn voor Fri3d Camp om in de algemene versie te kunnen.</p>"},{"location":"Retro--Go-Gaming/#ondersteunde-systemen","title":"Ondersteunde systemen:","text":"<ul> <li>Nintendo Entertainment System (NES)</li> <li>Gameboy</li> <li>Gameboy Color</li> <li>DOOM (ook mods!)</li> </ul> <p>Er zijn nog andere systemen ondersteund maar deze zijn niet geactiveerd op de Fri3D Camp 2024 Badge omdat ze minder populair zijn of omdat ze wat te traag werkten.</p>"},{"location":"Retro--Go-Gaming/#eigenschappen","title":"Eigenschappen:","text":"<ul> <li>Menu in de spelletjes</li> <li>Favorieten en recent gespeelde spellen</li> <li>GameBoy kleurenpaletten, klok aanpassen en bewaren</li> <li>NES kleurenpaletten, PAL ROMs, NSF ondersteuning</li> <li>Opties om het scherm te schalen en te filteren</li> <li>Goeie performantie en compatibiliteit</li> <li>Turbo Snelheid/Doorspoelen</li> <li>Hoesjes en voorbeeldweergave van bewaarde spelstatus</li> <li>Meerdere spelstatussen bewaren per spel</li> <li>Bestanden beheren via draadloos netwerk</li> <li>Vriend-naar-vriend spelletjes ROMs delen</li> <li>Aansturing van piezoelektrische zoemer als primitieve luidspreker</li> <li>Ondersteuning voor Fri3d Camp 2024 \"Communicator\" en andere externe luidsprekers</li> </ul>"},{"location":"Retro--Go-Gaming/#schermafdrukken","title":"Schermafdrukken","text":""},{"location":"arduino/","title":"Arduino IDE installatie","text":"<p>Download de Arduino IDE van hun website Om de Fri3d badge te gebruiken in de Arduino IDE moet je versie <code>2.0.17</code> van de ESP32 board package installeren. Hieronder de instructies.</p>"},{"location":"arduino/#general-arduino-ide-setup-voor-esp32","title":"General Arduino IDE Setup voor ESP32","text":"<ul> <li>In de Arduino IDE klik je op het <code>Tools</code> menu, selecteer <code>Boards</code> vervolgens <code>Boards Manager</code>. Installeer  versie 2.0.17 van het ESP32 packet.</li> <li>de reden dat we versie <code>2.0.17</code> adviseren is omdat versie <code>3.0.2</code> compilatie fouten geeft voor de ESP32S3 module.</li> <li>In het <code>Tools</code> menu, selecteer <code>Board</code> -&gt; <code>esp32</code> -&gt; <code>ESP32S3 Dev Module</code></li> </ul>"},{"location":"arduino/#hoe-uploaden-in-arduino-ide","title":"Hoe uploaden in Arduino IDE","text":"<ul> <li>Zet je badge aan</li> <li>Connecteer de badge via USB aan je computer</li> <li>In het <code>Tools</code> menu selecteer je <code>Port</code> en kies je uit de lijst degene die het meest lijkt op de badge.</li> <li>Klik op de Upload knop (rechts wijzende groene pijl)</li> </ul>"},{"location":"communicator/","title":"Communicator add-on","text":"<p>Om je communicator te doen werken, moet je door twee fases: - Hardware: assembleer de hardware (solderen). - Software: flash de firmware (embedded software) naar de LANA module op je communicator.</p> <p>De hardware assemblage proces is uitgelegd op deze pagina. Voor de software verwijzen we naar deze pagina.</p> <p> </p>"},{"location":"communicator/#hardware","title":"HARDWARE","text":""},{"location":"communicator/#communicator-eigenschappen","title":"Communicator eigenschappen","text":"<p>De communicator bestaat uit:</p> <ul> <li>QWERTY toetsenbord met achtergrond verlichting ontworpen door Solder Party</li> <li>op RISC-V gebaseerd microcontroller module LANA TNY</li> <li>TDK ICS43434 microfoon</li> <li>Analog Devices MAX98357A DAC met versterker</li> <li>kleine luidspreker</li> </ul> <p>Je kan het toetsenbord ook als USB toetsenbord gebruiken, echter sluit de USB kabel niet aan wanneer het bord aan de badge hangt!</p> <p>De ontwerp- en bronbestanden kan je terugvinden in de GitHub repository</p> <p></p>"},{"location":"communicator/#stap-voor-stap-assemblage-handleiding","title":"Stap voor stap assemblage handleiding","text":""},{"location":"communicator/#alle-componenten-netjes-verpakt","title":"Alle componenten netjes verpakt","text":"<p>Het pakje dat je ontvangen hebt bevat alles wat je nodig hebt om de communicator add-on te bouwen</p> <ul> <li>Communicator printplaat</li> <li>Roze afdekplaat</li> <li>4 x 16mm lange plastieken pin</li> <li>4 x 2mm lange plastieken pin</li> <li>luidspreker</li> <li>siliconen toetsenbord</li> <li>2 x 6 pin extra lange pinnen</li> </ul> <p></p>"},{"location":"communicator/#monteer-de-luidspreker","title":"Monteer de luidspreker","text":"<p>Verwijder de plastieken laag om de luidspreker op de printplaat te kleven. Soldeer de 2 draden op de printplaat zoals op de foto hieronder. De rode draad moet naar het soldeervlak gaan dat gemarkeerd is met een <code>+</code></p> <p> </p>"},{"location":"communicator/#soldeer-de-lange-pinnen","title":"Soldeer de lange pinnen","text":"<p>Plaats de lange pinnen aan de zijde met alle componenten. Je kan een andere vrouwelijke connector (of zelfs de badge) gebruiken om de 2 losse pinnen stroken netjes op een rijtje te houden tijdens het solderen.</p> <p></p>"},{"location":"communicator/#monteer-het-toetsenbord","title":"Monteer het toetsenbord","text":"<p>Duw de 2mm lange plastieken pinnetjes in de roze cover zoals getoond op de foto's hieronder. Leg het siliconen toetsenbord er in en klik het geheel op de communicator printplaat.</p> <p> </p>"},{"location":"communicator/#verbind-de-communicator-met-de-badge","title":"Verbind de communicator met de badge","text":"<p>Duw de 16mm lange plastieken pinnetjes in de 4 gaten die overeenkomen met de badge. Verwijder de beschermende achterplaat en duw de communicator op zijn plaats.</p> <p> </p>"},{"location":"communicator/#gebruik","title":"Gebruik","text":"<p>Het toetsenbord doet zich voor als een HID input toestel. Met de <code>Fn</code> toets kan je speciale functies activeren:</p> <ul> <li><code>Fn+Rood Vierkant</code>: Maak de LED op LANA rood</li> <li><code>Fn+Oranje Driehoek</code>: Maak de LED op LANA oranje</li> <li><code>Fn+Geel Fri3d logo</code>: Maak de LED op LANA geel</li> <li><code>Fn+Groene Cirkel</code>: Maak de LED op LANA groen</li> <li><code>Fn+Blauwe Klaverblad</code>: Maak de LED op LANA blauw</li> <li><code>Fn+Paarse Ruit</code>: Maak de LED op LANA paars</li> <li><code>Fn+Solder Party</code>: Zet de LED op LANA uit</li> <li><code>Fn+Backspace</code>: Delete</li> <li><code>Fn+Omhoog</code>: Page Up</li> <li><code>Fn+Omlaag</code>: Page Down</li> <li><code>Fn+Links</code>: Home</li> <li><code>Fn+Rechts</code>: End</li> <li><code>Fn+Spatiebalk</code>: schakel de achtergrond verlichting aan/uit</li> <li><code>Fn+Rechtse Shift</code>: Schakel Caps Lock</li> </ul>"},{"location":"communicator/#firmware-functies","title":"Firmware functies","text":"<p>De firmware stuurt HID pakketten (8 bytes) uit op USB, I2C (adres <code>0x38</code>) en UART.</p> <p>De eerste byte geeft aan welke modificatietoetsen zijn ingedrukt:</p> Bit Modifier Key 0 LINKSE CTRL 1 LINKSE SHIFT 2 LINKSE ALT 3 LINKSE GUI 4 RECHTSE CTRL 5 RECHTSE SHIFT 6 RECHTSE ALT 7 RECHTSE GUI <p>De tweede byte is gereserveerd, de overige 6 bytes kunnen een HID-sleutelcode bevatten.</p> <p> </p>"},{"location":"communicator/#software-firmware","title":"SOFTWARE (FIRMWARE)","text":"<p>Normaal zou de firmware al op je LANA module geflashed moeten zijn. Echter, als het niet zou werken: je kan de firmware flashen aan de <code>badge flash station</code> in de soldeer area.</p> <p>Als je wil, kan je de firmware ook zelf flashen met je eigen laptop. Bijvoorbeeld mocht je de firmware willen updaten of zelf aanpassingen willen maken. De instructies vind je op deze pagina.</p>"},{"location":"communicator/programming/","title":"De LANA Module Programmeren","text":"<p>Om de LANA module op je <code>communicator</code> te programmeren, kun je zowel Embeetle IDE als Mounriver Studio gebruiken.</p> <p> </p>"},{"location":"communicator/programming/#embeetle-ide","title":"Embeetle IDE","text":"<p>Embeetle is een IDE van Belgische makelij. De LANA kan worden geprogrammeerd via USB-C-aansluiting, maar ook met de WCH-Link debugger, wat extra debug-mogelijkheden biedt. Klik hier voor de volledige documentatie over hoe je de LANA module in Embeetle kunt programmeren. De onderstaande stappen zijn een quick start guide om je LANA module via de USB-C-poort te programmeren.</p> <p> </p>"},{"location":"communicator/programming/#stap-1-download-embeetle-ide","title":"STAP 1: Download Embeetle IDE","text":"<p>Download eerst Embeetle:  - https://embeetle.com/downloads</p> <p>Je kunt het downloaden voor zowel Windows als Linux. We hebben nog geen ondersteuning voor MAC.</p> <p></p> <p> </p>"},{"location":"communicator/programming/#stap-2-start-het-lana-tny-01-communicator-2024-project","title":"STAP 2: Start het <code>lana-tny-01-communicator-2024</code> project","text":"<p>Start Embeetle en klik op 'CREATE PROJECT':</p> <p></p> <p>  Selecteer vervolgens <code>WCH</code> als chip fabrikant en zoek naar het project <code>lana-tny-01-communicator-2024</code>:</p> <p></p> <p>  Klik onderaan op <code>CREATE</code>. Embeetle IDE zal het project en ook alle benodigde tools automatisch downloaden. Dan opent het project:</p> <p></p> <p> </p>"},{"location":"communicator/programming/#stap-3-plug-het-bordje-in","title":"STAP 3: Plug het bordje in","text":"<p>DRUK EERST op de <code>BOOT</code>-knop en SLUIT DAN je bordje aan op de computer met een USB-C-kabel (terwijl je de <code>BOOT</code>-knop ingedrukt houdt):</p> <p></p> <p>Wanneer het bordje is aangesloten, kun je de <code>BOOT</code>-knop loslaten. Deze procedure zorgt ervoor dat je bordje in \"bootloader-modus\" komt. Dit betekent dat de microcontroller klaar is om nieuwe firmware te ontvangen!</p> <p> </p>"},{"location":"communicator/programming/#stap-4-flash-de-firmware","title":"STAP 4: Flash de firmware","text":"<p>Klik nu op de <code>flash</code>-knop bovenaan in Embeetle IDE. Embeetle zal proberen de firmware naar de LANA module te flashen. Echter, je kunt nu de volgende foutmelding krijgen: <pre><code>Failed to open USB device: Bus 001 Device 008: ID 4348:55e0\nError: Failed to open USB device on Windows\n</code></pre> Op Linux kun je een ander probleem tegenkomen: <pre><code>Failed to open USB device: Bus 003 Device 010: ID 4348:55e0\nError: Failed to open USB device on Linux due to no enough permission\n</code></pre> Hieronder is de oplossing.</p> <p> </p>"},{"location":"communicator/programming/#stap-5a-installeer-zadig-alleen-windows","title":"STAP 5a: Installeer Zadig (alleen Windows)","text":"<p>Je moet Zadig installeren en de driver voor het USB-apparaat vervangen door de WinUSB-driver. Download eerst Zadig: </p> <p></p> <p>  Open vervolgens Zadig en selecteer Options -&gt; List All Devices:</p> <p></p> <p>  Selecteer USB Module uit de list of devices en kies WinUSB als driver. Klik vervolgens op Replace Driver:</p> <p></p> <p>  Wacht tot de driver-installatie is voltooid:</p> <p></p> <p>  Succes:</p> <p></p> <p>  Probeer het opnieuw in Embeetle IDE. Het zou nu moeten werken:</p> <pre><code>\"C:/Users/krist/EMBEETLE IDE/embeetle/beetle_tools/windows/wchisp_0.2.2_64b/wchisp.exe\" flash application.elf\n14:57:06 [INFO] Chip: CH32V203G6U6[0x3619] (Code Flash: 32KiB)\n14:57:06 [INFO] Chip UID: CD-AB-19-97-D0-BC-B6-FF\n14:57:06 [INFO] BTVER(bootloader ver): 02.70\n14:57:06 [INFO] Code Flash protected: false\n14:57:06 [INFO] Current config registers: a55aff0000ff00ffffffffff00020700cdab1997d0bcb6ff\nRDPR_USER: 0x00FF5AA5\n  [7:0]   RDPR 0xA5 (0b10100101)\n    `- Unprotected\n  [16:16] IWDG_SW 0x1 (0b1)\n    `- IWDG enabled by the software, and disabled by hardware\n  [17:17] STOP_RST 0x1 (0b1)\n    `- Disable\n  [18:18] STANDBY_RST 0x1 (0b1)\n    `- Disable, entering standby-mode without RST\n  [23:22] SRAM_CODE_MODE 0x3 (0b11)\n    `- CODE-228KB + RAM-32KB / CODE-160KB + RAM-32KB depending on the chip\nDATA: 0xFF00FF00\n  [7:0]   DATA0 0x0 (0b0)\n  [23:16] DATA1 0x0 (0b0)\nWRP: 0xFFFFFFFF\n  `- Unprotected\n14:57:06 [INFO] Read application.elf as ELF format\n14:57:06 [INFO] Found loadable segment, physical address: 0x00000000, virtual address: 0x00000000, flags: 0x5\n14:57:06 [INFO] Section names: [\".init\", \".vector\", \".text\"]\n14:57:06 [INFO] Found loadable segment, physical address: 0x00000dbc, virtual address: 0x20000000, flags: 0x6\n14:57:06 [INFO] Section names: [\".data\"]\n14:57:06 [INFO] Firmware size: 4096\n14:57:06 [INFO] Erasing...\n14:57:06 [WARN] erase_code: set min number of erased sectors to 8\n14:57:06 [INFO] Erased 8 code flash sectors\n14:57:07 [INFO] Erase done\n14:57:07 [INFO] Writing to code flash...\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 4096/409614:57:07 [INFO] Code flash 4096 bytes written\n14:57:08 [INFO] Verifying...\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 4096/409614:57:08 [INFO] Verify OK\n14:57:08 [INFO] Now reset device and skip any communication errors\n14:57:08 [INFO] Device reset\n</code></pre> <p>Als het niet werkte, trek dan de LANA-module eruit en sluit hem opnieuw aan op je computer terwijl je de <code>BOOT</code>-knop ingedrukt houdt (laat de knop een paar seconden na het aansluiten op de computer los), om ervoor te zorgen dat het echt in \"bootloader-modus\" is. Als het nog steeds niet werkt, aarzel dan niet om contact met ons op te nemen:  - E-mail: kristof@embeetle.com  - Whatsapp: +32(0) 496 90 75 44  - Discord: @kristof-at-embeetle</p> <p> </p>"},{"location":"communicator/programming/#stap-5b-voeg-apparaat-toe-aan-plugdev-groep-alleen-linux","title":"STAP 5b: Voeg apparaat toe aan plugdev groep (alleen Linux)","text":"<p>Op Linux moet je het apparaat toevoegen aan de plugdev groep. Controleer eerst de groepen die gekoppeld zijn aan de huidige gebruiker: <pre><code>$ groups whoami\nkristof : kristof adm cdrom sudo dip plugdev lpadmin lxd sambashare\n</code></pre> Als <code>plugdev</code> niet is vermeld, voeg dan de huidige gebruiker toe aan die groep:  <pre><code>$ sudo useradd -G plugdev whoami\n</code></pre> Bepaal de Vendor ID en Product ID van je apparaat met het <code>$ lsusb</code> commando:  <pre><code>$ lsusb\nBus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\nBus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub\nBus 003 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\nBus 003 Device 002: ID 046d:c548 Logitech, Inc. Logi Bolt Receiver\nBus 003 Device 003: ID 1a40:0101 Terminus Technology Inc. Hub\nBus 003 Device 004: ID 04f2:b75c Chicony Electronics Co., Ltd FHD Webcam\nBus 003 Device 005: ID 1a2c:4324 China Resource Semico Co., Ltd USB Keyboard\nBus 003 Device 006: ID 048d:6005 Integrated Technology Express, Inc. ITE Device(8291)\nBus 003 Device 007: ID 1bcf:2701 Sunplus Innovation Technology Inc. HD 720P webcam\nBus 003 Device 008: ID 048d:ce00 Integrated Technology Express, Inc. ITE Device(8291)\nBus 003 Device 009: ID 8087:0026 Intel Corp. AX201 Bluetooth\nBus 003 Device 011: ID 4348:55e0 WinChipHead\nBus 004 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub\nBus 004 Device 002: ID 0bda:0316 Realtek Semiconductor Corp. Card Reader\n</code></pre> Zoek naar de lijn met <code>WinChipHead</code> (derde van onder). Zoals je kunt zien, bestaat de ID voor mijn apparaat uit twee 4-cijferige hex-getallen: <code>ID 4348:55e0</code>. De eerste is de Vendor ID, de tweede de Product ID. Verwissel ze niet!</p> <p>Navigeer in de console naar <code>/etc/udev/rules.d</code> en lijst de inhoud van de directory: <pre><code>$ cd /etc/udev/rules.d\n$ ls\n70-snap.core.rules\n70-snap.firefox.rules\n70-snap.snap-store.rules\n</code></pre> Maak een nieuw bestand aan, bijvoorbeeld met de gedit-editor:  <pre><code>$ sudo gedit 10-probe.rules\n</code></pre> Je kunt dit bestand een willekeurige naam geven, zolang het maar eindigt op <code>.rules</code>. Rules files beginnen bij conventie met een nummer. Linux behandelt rules files in lexicale volgorde, en het nummer maakt het gemakkelijk te zien welke bestanden eerst worden gelezen. Het kiezen van een laag nummer (zoals 10, hierboven) betekent dat je bestand wordt gelezen v\u00f3\u00f3r de system rules files.</p> <p>Nu moet je een lijn aan het bestand toevoegen die je apparaat vertegenwoordigt. Als het bestand al bestond (van een eerder toegevoegd apparaat op deze manier), kun je alle inhoud laten zoals die is en gewoon een lijn onderaan toevoegen. De lijn die je moet toevoegen is: <pre><code>ATTRS{idVendor}==\"4348\", ATTRS{idProduct}==\"55e0\", MODE=\"666\", GROUP=\"plugdev\"\n</code></pre> Opmerking: In oudere Ubuntu/Linux-installaties moet je 'ATTRS' mogelijk vervangen door 'SYSFS'.</p> <p>Vul natuurlijk je eigen Vendor ID en Product ID in! (hoewel de bovenstaande correct zouden moeten zijn voor het <code>LANA-TNY-01</code> bordje). Sla het bestand op en sluit het. Nu moet je Linux opdracht geven om de udev-regels opnieuw te laden: <pre><code>$ sudo udevadm trigger\n</code></pre> Elk lid van de plugdev groep zou nu <code>wchisp</code> moeten kunnen uitvoeren zonder gebruik van <code>sudo</code>.</p> <p>Probeer opnieuw te flashen in Embeetle IDE. Als het niet werkt, trek dan de LANA-module eruit en sluit hem opnieuw aan op je computer terwijl je de <code>BOOT</code>-knop ingedrukt houdt (laat de knop een paar seconden na het aansluiten op de computer los), om ervoor te zorgen dat het echt in \"bootloader-modus\" is. Als het nog steeds niet werkt, aarzel dan niet om contact met ons op te nemen:  - E-mail: kristof@embeetle.com  - Whatsapp: +32(0) 496 90 75 44  - Discord: @kristof-at-embeetle</p> <p> </p>"},{"location":"communicator/programming/#mounriver-studio","title":"Mounriver Studio","text":"<p>Mounriver is een IDE gebaseerd op eclipse, uitgebracht door de chipmaker WCH. Dit werkt op Windows en er is een versie voor Linux en mogelijk ook voor Mac, maar de laatste twee lopen een beetje achter. Mounriver geeft ook vaak foutieve virusmeldingen op veel systemen en schendt de GPL-licentievoorwaarden van de GCC Compiler.</p> <p> </p>"},{"location":"communicator/programming/#opmerkingen-over-de-lana-module","title":"Opmerkingen over de LANA-module","text":"<p>Als je zelf aan de slag gaat met de LANA TNY, moet je op \u00e9\u00e9n ding letten (ongeacht de IDE): LANA heeft geen externe klok en moet de interne klok (HSI) gebruiken, dit wordt ook vermeld in de standaard sketch van Embeetle. Als je per ongeluk je LANA board \"brickt\", kun je deze meestal debricken via USB of door gebruik te maken van de power reset-functie van de WCHISPTool.</p>"},{"location":"esphome/","title":"ESPHome documentatie","text":"<p>Deze pagina bevat de refentie code voor elke onderdeel op de badge. We gaan er van uit dat je esphome reeds ge\u00efnstalleerd hebt en vertrouwd bent met het toevoegen van een toestel.</p>"},{"location":"esphome/#gemeenschappelijke-code","title":"Gemeenschappelijke code","text":"<pre><code>substitutions:\n  esphome_name: fri3d2024\n\nesphome:\n  name: ${esphome_name}\n\nesp32:\n  board: esp32-s3-devkitc-1\n  framework:\n    type: arduino\n</code></pre>"},{"location":"esphome/#scherm","title":"Scherm","text":"<pre><code>spi:\n  clk_pin: GPIO7\n  mosi_pin: GPIO6\n\ndisplay:\n  - platform: ili9xxx\n    model: ST7789V\n    dimensions:\n      height: 240\n      width: 296\n    transform:\n      swap_xy: true\n      mirror_x: false\n    data_rate: 80MHz\n    dc_pin: GPIO4\n    cs_pin: GPIO5\n    reset_pin: GPIO48\n    auto_clear_enabled: false\n    lambda: |-\n      it.image(0, 0, id(my_image));\n#      it.print(0, 0, id(my_font), \"Hello World!\");\n#      it.printf(0, 15, id(my_font), TextAlign::BASELINE_LEFT, \"%.1f graden\", id(temperature).state);\n# sensor.living_room_temperature\n#      it.line(0, 0, 50, 50);\n\nfont:\n  - file: \"opensans.ttf\"\n    id: my_font\n    size: 20\n\nimage:\n  - file: \"fri3d.png\"\n    id: my_image\n    type: RGB24\n</code></pre> <p>TODO</p> <ul> <li>refresh log error</li> </ul>"},{"location":"esphome/#status-led","title":"Status LED","text":"<pre><code>light:\n  - platform: status_led\n    name: \"State\"\n    id: \"state\"\n    pin: GPIO21\n</code></pre>"},{"location":"esphome/#rgb-leds","title":"RGB LEDs","text":"<pre><code>light:\n  - platform: neopixelbus\n    type: GRB\n    variant: WS2812\n    pin: GPIO12\n    num_leds: 5\n    name: \"NeoPixel Light\"\n</code></pre>"},{"location":"esphome/#drukknoppen","title":"Drukknoppen","text":"<pre><code>binary_sensor:\n  - platform: gpio\n    pin:\n      number: GPIO39\n      mode:\n        input: true\n        pullup: true\n      inverted: true\n    name: \"A\"\n  - platform: gpio\n    pin:\n      number: GPIO40\n      mode:\n        input: true\n        pullup: true\n      inverted: true\n    name: \"B\"\n  - platform: gpio\n    pin:\n      number: GPIO38\n      mode:\n        input: true\n        pullup: true\n      inverted: true\n    name: \"X\"\n  - platform: gpio\n    pin:\n      number: GPIO41\n      mode:\n        input: true\n        pullup: true\n      inverted: true\n    name: \"Y\"\n  - platform: gpio\n    pin:\n      number: GPIO45\n      mode:\n        input: true\n        pullup: true\n      inverted: true\n    name: \"menu\"\n  - platform: gpio\n    pin:\n      number: GPIO0\n      mode:\n        input: true\n        #pullup: true\n      inverted: true\n    name: \"start\"\n</code></pre>"},{"location":"esphome/#joystick","title":"Joystick","text":"<pre><code>sensor:\n  - platform: adc\n    id: joystick_x\n    name: \"Joystick X axis\"\n    pin: GPIO01\n    internal: True\n    attenuation: auto\n    update_interval: 500ms\n\n  - platform: adc\n    id: joystick_y\n    name: \"Joystick Y axis\"\n    pin: GPIO03\n    internal: True\n    attenuation: 11db\n    update_interval: 500ms\n</code></pre> <p>TODO</p> <ul> <li>disable logging</li> <li>on_xxx: left/right &amp; up/down</li> </ul>"},{"location":"esphome/#zoemer","title":"Zoemer","text":"<p>TODO</p> <ul> <li>test</li> </ul>"},{"location":"esphome/#accelerometer","title":"Accelerometer","text":"<pre><code>i2c:\n  sda: GPIO9\n  scl: GPIO18\n  scan: true\n  id: bus_i2c\n</code></pre> <p>TODO</p> <ul> <li>contribute code &amp; test</li> </ul>"},{"location":"esphome/#ir-ontvanger","title":"IR Ontvanger","text":"<pre><code>remote_receiver:\n  pin:\n    number: GPIO11\n    inverted: true\n    mode:\n      input: true\n      pullup: true\n  dump: all\n</code></pre> <p>TODO</p> <ul> <li>test</li> </ul>"},{"location":"esphome/#batterij-monitor","title":"Batterij monitor","text":"<p>TODO</p> <ul> <li>test</li> </ul>"},{"location":"esphome/#aux-power","title":"AUX power","text":"<p>TODO</p> <ul> <li>test</li> </ul>"},{"location":"esphome/#sd-kaart","title":"SD Kaart","text":"<p>TODO</p> <ul> <li>define use case</li> </ul>"},{"location":"flamingo/","title":"Big Flamingo Gun 9000","text":"<p>Om je Flamingo Gun te doen werken, moet je door twee fases: - Hardware: assembleer de hardware (solderen). - Software: flash de firmware (embedded software) naar de LANA module op je Flamingo Gun.</p> <p>De hardware assemblage proces is uitgelegd op deze pagina. Voor de software verwijzen we naar deze pagina.</p> <p> </p>"},{"location":"flamingo/#hardware","title":"HARDWARE","text":""},{"location":"flamingo/#kenmerken","title":"Kenmerken","text":"<p>De flamingo blaster is opgebouwd rond volgende basiscomponenten:</p> <ul> <li>een IR LED</li> <li>2 IR-ontvangers</li> <li>4 WS2812 LED's</li> <li>RISC-V-gebaseerd microcontrollerbord LANA TNY</li> </ul> <p></p>"},{"location":"flamingo/#stapsgewijze-montagehandleiding","title":"Stapsgewijze montagehandleiding","text":""},{"location":"flamingo/#alle-componenten-netjes-verpakt","title":"Alle componenten netjes verpakt","text":"<p>Het pakket dat u hebt ontvangen, bevat alles wat u nodig hebt om uw eigen flamingo blaster te bouwen.</p> <ul> <li>1 IR LED</li> <li>1 team selector switch</li> <li>1 grote blauwe condensator</li> <li>1 buzzer</li> <li>1 trigger pushbutton</li> <li>1 lange strip pin headers (in twee\u00ebn te splitsen)</li> <li>1 enkele pin header</li> <li>1 MOSFET</li> <li>1 LANA TNY</li> <li>1 roze PCB</li> <li>1 badge link kabel</li> <li>2 IR ontvangers</li> <li>2 weerstanden</li> <li>2 badge link connectoren</li> <li>3 gele condensatoren (100nF)</li> <li>4 WS2812 LED's</li> </ul> <p></p>"},{"location":"flamingo/#begin-met-solderen","title":"Begin met solderen","text":"<p>Er is geen verkeerde volgorde om de onderdelen te solderen, maar we raden aan om eerst met de laagste componenten te beginnen.</p>"},{"location":"flamingo/#weerstanden","title":"Weerstanden","text":"<p>Het pakket bevat een grotere 33R weerstand en een kleinere 1k weerstand. Soldeer ze op de aangegeven plek op het bord. Zie de foto hieronder.</p> <p></p>"},{"location":"flamingo/#teamschakelaar-en-luidspreker","title":"Teamschakelaar en luidspreker","text":"<p>De volgende componenten met een laag profiel zijn de zoemer en de teamschakelaar. De zoemer heeft geen polariteit. Monteer de schakelaar met de actuator weg van de PCB (= de printplaat waarop je aan het solderen bent) gericht. Zet ze op de plek zoals aangegeven op de foto.</p> <p></p>"},{"location":"flamingo/#ir-led","title":"IR-LED","text":"<p>De infrarood-LED heeft wel een polariteit. Als u hem verkeerd om monteert, werkt de blaster niet. De lange pin van de LED moet in het vierkante gat met het <code>+</code> symbool ernaast. Zorg ervoor dat u wat ruimte overlaat om de LED naar voren te buigen (of nog beter, buig hem voordat u hem soldeert, zoals op de foto!)</p> <p></p> <p></p>"},{"location":"flamingo/#ir-ontvangers","title":"IR-ontvangers","text":"<p>De montagerichtingen van de 2 IR-ontvangers worden aangegeven door een pijl. Deze pijl wijst in de richting van de gaatjes waarin de pinnen moeten gaan (zie foto).</p> <p></p> <p></p>"},{"location":"flamingo/#rgb-leds","title":"RGB-LED's","text":"<p>De RGB-LED's hebben 4 aansluitingen, de langste aansluiting moet in het gat met de letter <code>c</code>. Buig de LED na het plaatsen maar voor u gaat solderen. Zo kunt u de uitlijning enigszins aanpassen voordat u ze op hun plaats bevestigt.</p> <p></p> <p></p>"},{"location":"flamingo/#triggerknop","title":"Triggerknop","text":"<p>Als u rechtshandig bent, soldeert u de drukknop aan de zijkant met alle andere componenten. Als u linkshandig bent soldeer je de drukknop in dezelfde gaten aan de kant zonder componenten.</p> <p></p>"},{"location":"flamingo/#lana-tny-module","title":"LANA TNY-module","text":"<p>Gebruik de grote en de losse enkele pinheader om de LANA TNY-module te solderen. Breek de lange pinheader in 2 voor de zijkanten. Plaats de pinnen in de flamingo en lijn de LANA-module er bovenop uit. Soldeer de pinnen afwisselend om te voorkomen dat de pinheader smelt.</p> <p></p> <p></p>"},{"location":"flamingo/#condensatoren","title":"Condensatoren","text":"<p>De grote blauwe condensator, net als de IR-LED, heeft een lange pin die de anode van dit onderdeel aangeeft. Deze langere pin moet in het gat met het <code>+</code> symbool worden geplaatst.</p> <p>De kleinere gele condensatoren hebben geen polariteit en kunnen op beide manieren worden gemonteerd. Soldeer ze op de aangegeven plaats (zie foto).</p> <p></p> <p></p>"},{"location":"flamingo/#badge-linkconnector","title":"Badge-linkconnector","text":"<p>Het laatste onderdeel is de badge-linkconnector. Deze 3,5 mm audio-aansluiting is aan dezelfde kant gesoldeerd als alle andere componenten</p> <p></p>"},{"location":"flamingo/#afgewerkte-blaster","title":"Afgewerkte blaster","text":"<p>Als alles volgens plan verloopt, zou u nu een functionele blaster moeten hebben.</p> <p></p>"},{"location":"flamingo/#monteer-de-connector-op-uw-badge","title":"Monteer de connector op uw badge","text":"<p>Nu hoeft u alleen nog maar de badge-linkconnector aan uw badge toe te voegen. Monteer deze connector aan de achterkant van de badge (dezelfde kant als de draadloze module en de batterij).</p> <p></p> <p></p> <p>Let op dat er geen kortsluiting is tussen de voorste pin en de decoratie van de badge! Soldeer fijn en met minimaal soldeersel! (zie foto)</p> <p></p>"},{"location":"flamingo/#opmerkingen","title":"Opmerkingen","text":"<p>Hardware-ontwerpbestanden en firmware zijn te vinden in de GitHub-repository.</p> <p> </p>"},{"location":"flamingo/#software-firmware","title":"SOFTWARE (FIRMWARE)","text":"<p>Normaal zou de firmware al op je LANA module geflashed moeten zijn. Echter, als het niet zou werken: je kan de firmware flashen aan de <code>badge flash station</code> in de soldeer area.</p> <p>Als je wil, kan je de firmware ook zelf flashen met je eigen laptop. Bijvoorbeeld mocht je de firmware willen updaten of zelf aanpassingen willen maken. De instructies vind je op deze pagina.</p>"},{"location":"flamingo/programming/","title":"De LANA Module Programmeren","text":"<p>Om de LANA module op je <code>blaster</code> (flamingo) te programmeren, kun je zowel Embeetle IDE als Mounriver Studio gebruiken.</p> <p> </p>"},{"location":"flamingo/programming/#embeetle-ide","title":"Embeetle IDE","text":"<p>Embeetle is een IDE van Belgische makelij. De LANA kan worden geprogrammeerd via USB-C-aansluiting, maar ook met de WCH-Link debugger, wat extra debug-mogelijkheden biedt. Klik hier voor de volledige documentatie over hoe je de LANA module in Embeetle kunt programmeren. De onderstaande stappen zijn een quick start guide om je LANA module via de USB-C-poort te programmeren.</p> <p> </p>"},{"location":"flamingo/programming/#stap-1-download-embeetle-ide","title":"STAP 1: Download Embeetle IDE","text":"<p>Download eerst Embeetle:  - https://embeetle.com/downloads</p> <p>Je kunt het downloaden voor zowel Windows als Linux. We hebben nog geen ondersteuning voor MAC.</p> <p></p> <p> </p>"},{"location":"flamingo/programming/#stap-2-start-het-lana-tny-01-blaster-2024-project","title":"STAP 2: Start het <code>lana-tny-01-blaster-2024</code> project","text":"<p>Start Embeetle en klik op 'CREATE PROJECT':</p> <p></p> <p>  Selecteer vervolgens <code>WCH</code> als chip fabrikant en zoek naar het project <code>lana-tny-01-blaster-2024</code>:</p> <p></p> <p>  Klik onderaan op <code>CREATE</code>. Embeetle IDE zal het project en ook alle benodigde tools automatisch downloaden. Dan opent het project:</p> <p></p> <p> </p>"},{"location":"flamingo/programming/#stap-3-plug-het-bordje-in","title":"STAP 3: Plug het bordje in","text":"<p>DRUK EERST op de <code>BOOT</code>-knop en SLUIT DAN je bordje aan op de computer met een USB-C-kabel (terwijl je de <code>BOOT</code>-knop ingedrukt houdt):</p> <p></p> <p>Wanneer het bordje is aangesloten, kun je de <code>BOOT</code>-knop loslaten. Deze procedure zorgt ervoor dat je bordje in \"bootloader-modus\" komt. Dit betekent dat de microcontroller klaar is om nieuwe firmware te ontvangen!</p> <p> </p>"},{"location":"flamingo/programming/#stap-4-flash-de-firmware","title":"STAP 4: Flash de firmware","text":"<p>Klik nu op de <code>flash</code>-knop bovenaan in Embeetle IDE. Embeetle zal proberen de firmware naar de LANA module te flashen. Echter, je kunt nu de volgende foutmelding krijgen: <pre><code>Failed to open USB device: Bus 001 Device 008: ID 4348:55e0\nError: Failed to open USB device on Windows\n</code></pre> Op Linux kun je een ander probleem tegenkomen: <pre><code>Failed to open USB device: Bus 003 Device 010: ID 4348:55e0\nError: Failed to open USB device on Linux due to no enough permission\n</code></pre> Hieronder is de oplossing.</p> <p> </p>"},{"location":"flamingo/programming/#stap-5a-installeer-zadig-alleen-windows","title":"STAP 5a: Installeer Zadig (alleen Windows)","text":"<p>Je moet Zadig installeren en de driver voor het USB-apparaat vervangen door de WinUSB-driver. Download eerst Zadig: </p> <p></p> <p>  Open vervolgens Zadig en selecteer Options -&gt; List All Devices:</p> <p></p> <p>  Selecteer USB Module uit de list of devices en kies WinUSB als driver. Klik vervolgens op Replace Driver:</p> <p></p> <p>  Wacht tot de driver-installatie is voltooid:</p> <p></p> <p>  Succes:</p> <p></p> <p>  Probeer het opnieuw in Embeetle IDE. Het zou nu moeten werken:</p> <pre><code>\"C:/Users/krist/EMBEETLE IDE/embeetle/beetle_tools/windows/wchisp_0.2.2_64b/wchisp.exe\" flash application.elf\n14:57:06 [INFO] Chip: CH32V203G6U6[0x3619] (Code Flash: 32KiB)\n14:57:06 [INFO] Chip UID: CD-AB-19-97-D0-BC-B6-FF\n14:57:06 [INFO] BTVER(bootloader ver): 02.70\n14:57:06 [INFO] Code Flash protected: false\n14:57:06 [INFO] Current config registers: a55aff0000ff00ffffffffff00020700cdab1997d0bcb6ff\nRDPR_USER: 0x00FF5AA5\n  [7:0]   RDPR 0xA5 (0b10100101)\n    `- Unprotected\n  [16:16] IWDG_SW 0x1 (0b1)\n    `- IWDG enabled by the software, and disabled by hardware\n  [17:17] STOP_RST 0x1 (0b1)\n    `- Disable\n  [18:18] STANDBY_RST 0x1 (0b1)\n    `- Disable, entering standby-mode without RST\n  [23:22] SRAM_CODE_MODE 0x3 (0b11)\n    `- CODE-228KB + RAM-32KB / CODE-160KB + RAM-32KB depending on the chip\nDATA: 0xFF00FF00\n  [7:0]   DATA0 0x0 (0b0)\n  [23:16] DATA1 0x0 (0b0)\nWRP: 0xFFFFFFFF\n  `- Unprotected\n14:57:06 [INFO] Read application.elf as ELF format\n14:57:06 [INFO] Found loadable segment, physical address: 0x00000000, virtual address: 0x00000000, flags: 0x5\n14:57:06 [INFO] Section names: [\".init\", \".vector\", \".text\"]\n14:57:06 [INFO] Found loadable segment, physical address: 0x00000dbc, virtual address: 0x20000000, flags: 0x6\n14:57:06 [INFO] Section names: [\".data\"]\n14:57:06 [INFO] Firmware size: 4096\n14:57:06 [INFO] Erasing...\n14:57:06 [WARN] erase_code: set min number of erased sectors to 8\n14:57:06 [INFO] Erased 8 code flash sectors\n14:57:07 [INFO] Erase done\n14:57:07 [INFO] Writing to code flash...\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 4096/409614:57:07 [INFO] Code flash 4096 bytes written\n14:57:08 [INFO] Verifying...\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 4096/409614:57:08 [INFO] Verify OK\n14:57:08 [INFO] Now reset device and skip any communication errors\n14:57:08 [INFO] Device reset\n</code></pre> <p>Als het niet werkte, trek dan de LANA-module eruit en sluit hem opnieuw aan op je computer terwijl je de <code>BOOT</code>-knop ingedrukt houdt (laat de knop een paar seconden na het aansluiten op de computer los), om ervoor te zorgen dat het echt in \"bootloader-modus\" is. Als het nog steeds niet werkt, aarzel dan niet om contact met ons op te nemen:  - E-mail: kristof@embeetle.com  - Whatsapp: +32(0) 496 90 75 44  - Discord: @kristof-at-embeetle</p> <p> </p>"},{"location":"flamingo/programming/#stap-5b-voeg-apparaat-toe-aan-plugdev-groep-alleen-linux","title":"STAP 5b: Voeg apparaat toe aan plugdev groep (alleen Linux)","text":"<p>Op Linux moet je het apparaat toevoegen aan de plugdev groep. Controleer eerst de groepen die gekoppeld zijn aan de huidige gebruiker: <pre><code>$ groups whoami\nkristof : kristof adm cdrom sudo dip plugdev lpadmin lxd sambashare\n</code></pre> Als <code>plugdev</code> niet is vermeld, voeg dan de huidige gebruiker toe aan die groep:  <pre><code>$ sudo useradd -G plugdev whoami\n</code></pre> Bepaal de Vendor ID en Product ID van je apparaat met het <code>$ lsusb</code> commando:  <pre><code>$ lsusb\nBus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\nBus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub\nBus 003 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\nBus 003 Device 002: ID 046d:c548 Logitech, Inc. Logi Bolt Receiver\nBus 003 Device 003: ID 1a40:0101 Terminus Technology Inc. Hub\nBus 003 Device 004: ID 04f2:b75c Chicony Electronics Co., Ltd FHD Webcam\nBus 003 Device 005: ID 1a2c:4324 China Resource Semico Co., Ltd USB Keyboard\nBus 003 Device 006: ID 048d:6005 Integrated Technology Express, Inc. ITE Device(8291)\nBus 003 Device 007: ID 1bcf:2701 Sunplus Innovation Technology Inc. HD 720P webcam\nBus 003 Device 008: ID 048d:ce00 Integrated Technology Express, Inc. ITE Device(8291)\nBus 003 Device 009: ID 8087:0026 Intel Corp. AX201 Bluetooth\nBus 003 Device 011: ID 4348:55e0 WinChipHead\nBus 004 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub\nBus 004 Device 002: ID 0bda:0316 Realtek Semiconductor Corp. Card Reader\n</code></pre> Zoek naar de lijn met <code>WinChipHead</code> (derde van onder). Zoals je kunt zien, bestaat de ID voor mijn apparaat uit twee 4-cijferige hex-getallen: <code>ID 4348:55e0</code>. De eerste is de Vendor ID, de tweede de Product ID. Verwissel ze niet!</p> <p>Navigeer in de console naar <code>/etc/udev/rules.d</code> en lijst de inhoud van de directory: <pre><code>$ cd /etc/udev/rules.d\n$ ls\n70-snap.core.rules\n70-snap.firefox.rules\n70-snap.snap-store.rules\n</code></pre> Maak een nieuw bestand aan, bijvoorbeeld met de gedit-editor:  <pre><code>$ sudo gedit 10-probe.rules\n</code></pre> Je kunt dit bestand een willekeurige naam geven, zolang het maar eindigt op <code>.rules</code>. Rules files beginnen bij conventie met een nummer. Linux behandelt rules files in lexicale volgorde, en het nummer maakt het gemakkelijk te zien welke bestanden eerst worden gelezen. Het kiezen van een laag nummer (zoals 10, hierboven) betekent dat je bestand wordt gelezen v\u00f3\u00f3r de system rules files.</p> <p>Nu moet je een lijn aan het bestand toevoegen die je apparaat vertegenwoordigt. Als het bestand al bestond (van een eerder toegevoegd apparaat op deze manier), kun je alle inhoud laten zoals die is en gewoon een lijn onderaan toevoegen. De lijn die je moet toevoegen is: <pre><code>ATTRS{idVendor}==\"4348\", ATTRS{idProduct}==\"55e0\", MODE=\"666\", GROUP=\"plugdev\"\n</code></pre> Opmerking: In oudere Ubuntu/Linux-installaties moet je 'ATTRS' mogelijk vervangen door 'SYSFS'.</p> <p>Vul natuurlijk je eigen Vendor ID en Product ID in! (hoewel de bovenstaande correct zouden moeten zijn voor het <code>LANA-TNY-01</code> bordje). Sla het bestand op en sluit het. Nu moet je Linux opdracht geven om de udev-regels opnieuw te laden: <pre><code>$ sudo udevadm trigger\n</code></pre> Elk lid van de plugdev groep zou nu <code>wchisp</code> moeten kunnen uitvoeren zonder gebruik van <code>sudo</code>.</p> <p>Probeer opnieuw te flashen in Embeetle IDE. Als het niet werkt, trek dan de LANA-module eruit en sluit hem opnieuw aan op je computer terwijl je de <code>BOOT</code>-knop ingedrukt houdt (laat de knop een paar seconden na het aansluiten op de computer los), om ervoor te zorgen dat het echt in \"bootloader-modus\" is. Als het nog steeds niet werkt, aarzel dan niet om contact met ons op te nemen:  - E-mail: kristof@embeetle.com  - Whatsapp: +32(0) 496 90 75 44  - Discord: @kristof-at-embeetle</p> <p> </p>"},{"location":"flamingo/programming/#mounriver-studio","title":"Mounriver Studio","text":"<p>Mounriver is een IDE gebaseerd op eclipse, uitgebracht door de chipmaker WCH. Dit werkt op Windows en er is een versie voor Linux en mogelijk ook voor Mac, maar de laatste twee lopen een beetje achter. Mounriver geeft ook vaak foutieve virusmeldingen op veel systemen en schendt de GPL-licentievoorwaarden van de GCC Compiler.</p> <p> </p>"},{"location":"flamingo/programming/#opmerkingen-over-de-lana-module","title":"Opmerkingen over de LANA-module","text":"<p>Als je zelf aan de slag gaat met de blaster/LANA TNY, moet je op \u00e9\u00e9n ding letten (ongeacht de IDE): LANA heeft geen externe klok en moet de interne klok (HSI) gebruiken, dit wordt ook vermeld in de standaard sketch van Embeetle. Als je per ongeluk je LANA board \"brickt\", kun je deze meestal debricken via USB of door gebruik te maken van de power reset-functie van de WCHISPTool.</p>"},{"location":"micropython/","title":"MicroPython documentatie","text":"<p>NOG VERTALEN</p>"},{"location":"micropython/#flash-the-default-fri3d-micropython-firmware","title":"Flash the default fri3d micropython firmware","text":"<p>download firmware from https://github.com/cheops/fri3d-ota/tree/main/ota/fri3d_badge_2024 select the version and then the <code>*.zip</code> file in that folder</p> <p>flasher app  https://fri3d-flasher.vercel.app/#/</p> <p>If your download fails, you might have more success if you put the badge in DOWNLOAD mode manually: - PRESS + HOLD the START button - PRESS the RESET button (while HOLDING the START button) - the badge has now restarted in download mode</p> <p>after the download you might need to reset the badge to boot normally (PRESS the RESET button)</p>"},{"location":"micropython/#how-to-run-a-local-file","title":"How to run a local file","text":"<p>Install <code>mpremote</code> howto</p> <p>TLDR; <code>pip install mpremote</code></p> <p><pre><code>mpremote resume run local_test_file.py\n</code></pre> Unfortunately <code>Thonny</code> interrupts the startup of the badge when connecting, leaving some items (spi, display) in an undefined state. The same for <code>mpremote</code> if not supplied with the <code>resume</code> argument.</p>"},{"location":"micropython/#how-to-copy-a-file-to-the-badge","title":"how to copy a file to the badge","text":"<pre><code>mpremote resume fs cp local_path/file.jpg :file.jpg\n</code></pre>"},{"location":"micropython/#micropython-libraries","title":"Micropython libraries","text":"<p>Micropython quick reference for the esp32</p> <p>Micropython standard libraries overview doc</p> <p>The badge has lvgl built-in.</p> <p>Buttons demo demo_buttons.py</p> <p>Joystick demo demo_joystick.py</p> <p>Other interesting links - https://github.com/peterhinch/micropython-samples - https://github.com/mcauser/awesome-micropython</p>"},{"location":"micropython/#micropython-game-ideas","title":"micropython game ideas","text":"<ul> <li>https://hackaday.com/2021/05/25/simple-micropython-game-is-a-30-minute-game-dev-course/</li> <li>pinball link1 or link2</li> <li>gameESP</li> <li>snake</li> </ul>"},{"location":"micropython/lvgl/","title":"LVGL","text":"<p>badge_2024_micropython is gebouwd met LVLG v9.1 ingebakken.</p>"},{"location":"micropython/lvgl/#links","title":"links","text":"<ul> <li>lvgl homepage https://lvgl.io/</li> <li>lvgl documentatie https://docs.lvgl.io/9.1/</li> </ul>"},{"location":"micropython/lvgl/#python-voorbeelden-v84","title":"python voorbeelden (v8.4)","text":"<p>Spijtiggenoeg zijn de python voorbeelden niet meer beschikbaar voor v9.x Dit zijn de belangrijkste verschillen tussen v8.x en v9.x https://docs.lvgl.io/9.0/CHANGELOG.html en meer specifiek https://docs.lvgl.io/9.0/CHANGELOG.html#general-api-changes</p> <ul> <li>lvgl interactieve python voorbeelden (v8.4) https://docs.lvgl.io/8.4/examples.html</li> <li>lvgl python voorbeelden broncode (v8.4) (zoek voor *.py files) https://github.com/lvgl/lvgl/tree/v8.4.0/examples</li> </ul>"},{"location":"micropython/lvgl/#online-simulator","title":"Online simulator","text":"<p>Er is een online Micropython + lvgl (v9.0) simulator beschikbaar https://sim.lvgl.io/v9.0/micropython/ports/webassembly/index.html Dit is zeer handig om prototypes van nieuwe schermen te maken.</p>"},{"location":"micropython/lvgl/#simulator-examples","title":"Simulator Examples","text":""},{"location":"micropython/lvgl/#knop","title":"knop","text":"<pre><code># Initialize\nimport display_driver\nimport lvgl as lv\ndisp = lv.display_get_default()\ndisp.set_resolution(296,240)\n\n# Create a button with a label\nscr = lv.obj()\n\nbtn = lv.button(scr)\nbtn.align(lv.ALIGN.CENTER, 0, 0)\nlabel = lv.label(btn)\nlabel.set_text('Hello World!')\n\nlv.screen_load(scr)\n</code></pre>"},{"location":"micropython/lvgl/#knop-in-een-klasse-met-callback-onthouden-van-de-status","title":"knop in een klasse met callback, onthouden van de status","text":"<pre><code># Initialize\n\nimport display_driver\nimport lvgl as lv\n\ndisp = lv.display_get_default()\ndisp.set_resolution(296,240)\n\nclass CounterBtn:\n    def __init__(self):\n        screen = lv.screen_active()\n\n        screen.set_style_bg_color(lv.palette_darken(lv.PALETTE.GREY, 4), lv.PART.MAIN)\n\n        self.btn = lv.button(screen)\n        self.btn.align(lv.ALIGN.CENTER, 0, 0)\n\n        self.lbl = lv.label(self.btn)\n        self.lbl.set_text(\"Button\")\n\n        self.cnt = 0\n\n        self.btn.add_event_cb(self.btn_cb, lv.EVENT.ALL, None)\n\n    def btn_cb(self, evt):\n        code = evt.get_code()\n\n        if code == lv.EVENT.CLICKED:\n            self.cnt += 1\n            print(self.cnt)\n\n            self.lbl.set_text(\"Button: \" + str(self.cnt))\n\n\ncounter_btn = CounterBtn()\n</code></pre>"},{"location":"micropython/lvgl/#wifi-config-scherm","title":"wifi-config scherm","text":"<pre><code># Initialize\n\nimport display_driver\nimport lvgl as lv\n\ndisp = lv.display_get_default()\ndisp.set_resolution(296,240)\n\n\n\n\nclass TextArea:\n    def __init__(self, screen):\n        self._screen = screen\n        self.ta = lv.textarea(screen)\n        self.ta.add_event_cb(self._ta_event_cb, lv.EVENT.ALL, None)\n        self._kb = None\n\n    def _ta_event_cb(self, event):\n        code = event.get_code()\n\n        if code == lv.EVENT.CLICKED or code == lv.EVENT.FOCUSED:\n            if self._kb is None:\n                # create keyboard\n                self._kb = lv.keyboard(self._screen)\n                self._kb.set_size(self._screen.get_width(), int(self._screen.get_height()/2) )\n                self._kb.align_to(self.ta, lv.ALIGN.OUT_BOTTOM_MID, 0, 0)\n                self._kb.set_x(0)\n                self._kb.set_textarea(self.ta)\n                self._kb.add_event_cb(self._kb_event_cb, lv.EVENT.ALL, None)\n\n        elif code == lv.EVENT.DEFOCUSED:\n            if self._kb is not None:\n                self._kb.delete()\n                self._kb = None\n\n    def _kb_event_cb(self, event):\n        code = event.get_code()\n        if code == lv.EVENT.READY or code == lv.EVENT.CANCEL:\n            self.ta.send_event(lv.EVENT.DEFOCUSED, self.ta)\n\n\n\n\nclass ButtonLabel:\n    def __init__(self, screen, label, cb):\n        btn = lv.button(screen)\n        self.btn = btn\n        btn.set_height(30)\n        lbl = lv.label(btn)\n        lbl.set_text(label)\n        lbl.align(lv.ALIGN.CENTER, 0, 0)\n        btn.add_event_cb(self._bt_event_cb, lv.EVENT.CLICKED, None)\n        self.cb = cb\n\n    def _bt_event_cb(self, event):\n        # code = event.get_code()\n        self.cb()\n\n\n\nclass WifiScreen:\n    def __init__(self):\n        self._screen = lv.obj()\n        self._construct()\n\n    def load(self):\n        lv.screen_load(self._screen)\n\n    def _save_cb(self):\n        ssid = self.ss_ta.ta.get_text()\n        key = self.key_ta.ta.get_text()\n        print(f\"{ssid=}, {key=}\")\n        # TODO save\n\n    def _cancel_cb(self):\n        print(\"Cancel\")\n        #home_screen = fri3d.screens.home.HomeScreen()\n        #home_screen.load()\n\n    def _construct(self):\n        screen = self._screen\n\n        # title\n        title = lv.label(screen)\n        title.set_text(\"Wifi Configuration\")\n        title.align(lv.ALIGN.TOP_MID, 0, 0)\n\n        # ssid textarea\n        ss_ta = TextArea(screen)\n        self.ss_ta = ss_ta\n        ss_ta.ta.set_text(\"\")\n        ss_ta.ta.set_one_line(True)\n        ss_ta.ta.set_width(lv.pct(50))\n        ss_ta.ta.set_pos(100, 20)\n\n        # ssid label\n        ss_lbl = lv.label(screen)\n        ss_lbl.set_text(\"SSID:\")\n        ss_lbl.align_to(ss_ta.ta, lv.ALIGN.OUT_LEFT_MID, -5, 0)\n\n        # key textarea\n        key_ta = TextArea(screen)\n        self.key_ta = key_ta\n        key_ta.ta.set_text(\"\")\n        key_ta.ta.set_password_mode(True)\n        key_ta.ta.set_one_line(True)\n        key_ta.ta.set_width(lv.pct(50))\n        key_ta.ta.set_pos(100, 60)\n\n        # key label\n        key_lbl = lv.label(screen)\n        key_lbl.set_text(\"Key:\")\n        key_lbl.align_to(key_ta.ta, lv.ALIGN.OUT_LEFT_MID, -5, 0)\n\n        # save button\n        sv = ButtonLabel(screen, lv.SYMBOL.OK + \" Save\", self._save_cb)\n        sv.btn.align(lv.ALIGN.RIGHT_MID, -5, 0)\n\n        # cancel button\n        cancel = ButtonLabel(screen, lv.SYMBOL.CLOSE + \" Cancel\", self._cancel_cb)\n        cancel.btn.align(lv.ALIGN.LEFT_MID, 5, 0)\n\n\n\nw = WifiScreen()\nw.load()\n</code></pre>"},{"location":"micropython/lvgl/#canvas","title":"canvas","text":"<p>Rode rand rond een gouden achtergrond</p> <pre><code># Initialize\nimport display_driver\nimport lvgl as lv\ndisp = lv.display_get_default()\ndisp.set_resolution(296,240)\n\nscr = lv.screen_active()\n\nbuf = lv.draw_buf_create(scr.get_width(),scr.get_height(),lv.COLOR_FORMAT.RGB565, lv.STRIDE_AUTO)\ncanvas = lv.canvas(scr)\ncanvas.set_draw_buf(buf)\ncanvas.center()\n\nlayer = lv.layer_t()\ncanvas.init_layer(layer)\n\ndsc = lv.draw_rect_dsc_t()\ndsc.bg_color = lv.color_hex(0xffbf00)\ndsc.bg_opa = lv.OPA.COVER\n\ndsc.border_color = lv.palette_main(lv.PALETTE.RED)\ndsc.border_width = 2\ndsc.border_side = lv.BORDER_SIDE.TOP | lv.BORDER_SIDE.LEFT | lv.BORDER_SIDE.RIGHT | lv.BORDER_SIDE.BOTTOM\ndsc.border_opa = lv.OPA.COVER\n\ndsc.radius = 61\n\na = lv.area_t()\na.x1 = 0\na.y1 = 0\na.x2 = 295\na.y2 = 239\n\nlv.draw_rect(layer, dsc, a)\n\ncanvas.finish_layer(layer)\n</code></pre>"},{"location":"micropython/lvgl/#badge-voorbeelden","title":"Badge voorbeelden","text":""},{"location":"micropython/lvgl/#laad-een-png-afbeelding","title":"Laad een png afbeelding","text":"<pre><code># load fri3d_logo-min.png\npng = open('fri3d_logo-min.png', 'rb')\ndata = png.read()\npng.close()\n\nimg = lv.image(lv.screen_active())\n\nimgd = lv.image_dsc_t()\nimgd.header.cf = lv.COLOR_FORMAT.ARGB8888\nimgd.header.w = 240\nimgd.header.h = 240\nimgd.data = data\nimgd.data_size = len(data)\n\nimg.set_src(imgd)\n\nimg.align(lv.ALIGN.CENTER, 0, 0)\n</code></pre>"},{"location":"noisycricket/","title":"Noisy Cricket","text":""},{"location":"noisycricket/#montagefotos","title":"Montagefoto's","text":"<ol> <li> <p>Alle componenten netjes verpakt </p> </li> <li> <p>Uitgespreid in volgorde van solderen </p> </li> <li> <p>De componentzijde van de printplaat is waar het fri3d-logo staat</p> <ul> <li>33 Ohm (blauwe behuizing en oranje, oranje, zwarte kleurbanden) weerstand bovenaan</li> <li>120 Ohm (beige behuizing en zwarte, rode, zwarte kleurbanden) weerstand onderaan 2 weerstanden gesoldeerd </li> </ul> </li> <li> <p>NPN-transistor 2N3904 met platte kant naar links (achterkant van noisy cricket) </p> </li> <li> <p>Elektrolytische condensator (33 microFarad)    Let op de polariteit: lange poot is positief, korte poot is negatief, witte markering op de behuizing is negatief    Er zijn 2 gaten voor positief en 2 gaten voor negatief, kies de best passende.    </p> </li> <li> <p>Pinheader gesoldeerd aan de onderkant    2 orientaties zijn mogelijk:</p> <ul> <li>aan de onderkant: dit resulteert in een rechtopstaande positie wanneer gemonteerd op het fri3d2024-badge</li> <li>aan de achterkant: dit resulteert in een naar voren gerichte positie wanneer gemonteerd op het fri3d2024-badge </li> </ul> </li> <li> <p>Klaar om de LED te solderen    Let op de polariteit: lange poot is positief, korte poot is negatief, platte kant op de behuizing is negatief </p> </li> <li> <p>LED gesoldeerd    Let op de polariteit: positief (lange poot) aan de onderkant, negatief aan de bovenkant (korte poot, platte kant op de behuizing) </p> </li> <li> <p>Overzichtsfoto's van gesoldeerde Noisy Cricket </p> </li> <li> <p>Noisy Cricket gemonteerd op het fri3d2024-badge     Gemonteerd met de pinheader gesoldeerd aan de onderkant </p> <p>Gemonteerd met de pinheader gesoldeerd aan de achterkant </p> </li> </ol>"},{"location":"onboarding/firstupdate/","title":"Je eerste update","text":"<p>Met de meest rechtse schuifschakelaar op de badge, zet je hem aan. </p> <p>Als je de Fri3d badge voor de eerste keer opstart, kan je \"over the air\" (OTA) update starten. Gebruik de \"X\" en \"Y\" knoppen om tussen de knoppen op het scherm te wisselen.</p> <p></p> <p>gebruik de \"X\" of \"Y\" button om te bevestigen dat je online wil gaan. Dit werkt enkel op het Fri3d Camp netwerk.</p> <p></p> <p></p> <p>Selecteer de nieuwste versie -- niewer is altijd beter, niet? ;-)</p> <p></p> <p>Er zijn verschillende partities. De badge controleert ze allemaal en zal ze updaten indien nodig. Dit kan even duren.</p> <p></p> <p>Na de update herstart de badge automatisch.</p> <p></p> <p>Na de update is de optie \"hardware test\" verdwenen en staat er in de plaats \"MicroPython\"</p> <p></p> <p>Je badge is nu voorzien van de (voorlopig) laatste firmware</p>"},{"location":"onboarding/","title":"Onboarding documentatie","text":""},{"location":"onboarding/#badge","title":"Badge","text":"<p>Standaard software (\"Fri3d App\") kan je bedienen met de <code>X</code> (op), <code>Y</code> (neer), <code>A</code> (kies) &amp; <code>B</code> (terug) knoppen.</p> <ul> <li>OTA Update: hiermee kan je de laatste versie van de software installeren via Wi-Fi</li> <li>MicroPython: deze start MicroPython op</li> <li>Hardware test: een programma waarmee we elke badge getest hebben op werking</li> <li>Retro-Go Gaming: een emulator om Nintendo Entertainment System (NES), Gameboy, Gameboy Color en Doom games te kunnen spelen op de badge</li> </ul>"},{"location":"onboarding/#flamingo","title":"Flamingo","text":"<p>AKA BFG9000 (Big Flamingo Gun)</p> <p></p> <p>De flamingo kan je, eens deze gesoldeerd is, aansluiten op de badge en gebruiken. Geen verdere actie is vereist.</p>"},{"location":"onboarding/#mini-blaster","title":"Mini-blaster","text":"<p>AKA Noisy Cricket</p> <p></p> <p>Deze kleine SAO is te verkrijgen bij Team Badge tegen de kostprijs van 1 consumptie.</p>"},{"location":"onboarding/#communicator","title":"Communicator","text":"<p>Indien je hem niet aansluit op de badge, kan je de Communicator als USB Keyboard gebruiken. Als hem wel aansluit kan je gebruik maken van volgende functies:</p> <ul> <li>QWERTY toetsenbord met achtergrond verlichting ontworpen door Solder Party beschikbaar op UART</li> <li>TDK ICS43434 microfoon</li> <li>Analog Devices MAX98357A DAC met versterker verbonden aan een kleine luidspreker</li> </ul> <p>De toetsencombinaties om de verlichting aan en uit te zetten kan je terugvinden op de Communicator pagina.</p>"},{"location":"platformio/","title":"PlatformIO","text":""},{"location":"platformio/#visual-studio-code","title":"Visual Studio Code","text":"<p>Hier kan je VS Code downloaden: https://code.visualstudio.com/. Maak je geen zorgen als tijdens de installatie gevraagd wordt welke extensie je wil installeren. De nodige extensies kan je makkelijk achteraf installeren.</p>"},{"location":"platformio/#platformio-extensie","title":"PlatformIO extensie","text":"<ol> <li>In Visual Studio Code, ga naar de \"extensions\" tab. (CTRL+SHIFT+X)</li> <li>In de search bar, type \"platformio\"</li> <li>Installeer die met de oranje alien icon</li> </ol>"},{"location":"platformio/#hello-world","title":"Hello World","text":"<ol> <li>open het PlatformIO window (klik het alien icoon in de linker kolom)</li> <li>Kies \"New Project\"</li> <li>Als je het \"PlatformIO home\" window ziet, kan je ook op de \"+ new project\" knop klikken.</li> <li>Bij een nieuw project moet je <code>esp32-s3-devkitc-1</code> als board kiezen. PlatformIO zal nu een hoop libraries downloaden. Dat kan eventjes duren.</li> <li>Open platformio.ini - daar zou je het volgende moeten vinden:</li> </ol> <pre><code>    [env:esp32-s3-devkitc-1]\n    platform = espressif32\n    board = esp32-s3-devkitc-1\n    framework = arduino\n</code></pre> <ol> <li>voeg volgende lijntjes onderaan toe:</li> </ol> <pre><code>    board_build.arduino.memory_type = qio_opi\n    board_build.partitions = default_16MB.csv\n    board_upload.flash_size = 16MB\n    monitor_speed = 115200\n    lib_deps = bodmer/TFT_eSPI@^2.5.33\n    build_flags =\n        -DBOARD_HAS_PSRAM # N16R8V has PSRAM\n        -DARDUINO_USB_MODE=1 # necessary for serial port\n        -DARDUINO_USB_CDC_ON_BOOT=1 # necessary for serial port\n</code></pre>"},{"location":"platformio/#voorbeeld-code-in-github","title":"Voorbeeld code in GitHub","text":"<p>https://github.com/Fri3dCamp/badge_2024_arduino/tree/main/examples/platformio%20basic%20examples</p> <p>Om de hele mikmak te downloaden:</p> <ol> <li>Surf naar https://github.com/Fri3dCamp/badge_2024_arduino</li> <li>Klik \"Fork\"</li> <li>De hele repository staat nu identiek in je eigen account op github</li> <li>Klik op de groene knop <code>&lt;&gt; Code</code></li> <li>CTRL-C de URL die je vindt in de pop-up</li> <li>Open je Git Bash CLI in de folder waar je je code lokaal wil plaatsen</li> <li>Type <code>git clone</code> en CTRL-V URL from the Github repository</li> </ol>"},{"location":"platformio/#je-eigen-code-op-github","title":"Je eigen code op GitHub","text":"<ol> <li>Download GIT vanop https://git-scm.com/downloads</li> <li>Creeer je account op https://github.com</li> <li>Bovenaan het scherm, klik \"+\", dan \"New repository\"</li> <li>Volg de instructies op de GitHub pagina om de repository te clonen naar je eigen harde schijf.</li> <li>Coderen maar!</li> <li>Als je klaar bent, open de Git Bash CLI in de root folder van je repository</li> <li><code>git add .</code></li> <li><code>git commit -m \"cool new program\"</code></li> <li><code>git push</code></li> <li>Check op de Github website dat je nieuwe code is gearriveerd</li> </ol>"},{"location":"platformio/#jouw-code-op-de-fri3d-camp-repository","title":"Jouw code op de Fri3d Camp repository","text":"<ol> <li>Surf naar https://github.com/Fri3dCamp/badge_2024_arduino</li> <li>Klik \"Fork\"</li> <li>De hele repository staat nu identiek in je eigen account op github</li> <li>Klik op de groene knop <code>&lt;&gt; Code</code></li> <li>CTRL-C de URL die je vindt in de pop-up</li> <li>Open je Git Bash CLI in de folder waar je je code lokaal wil plaatsen</li> <li>Type <code>git clone</code> en CTRL-V URL from the Github repository</li> </ol> <p>Tot nu waren de instructies identiek aan het downloaden van de voorbeelden</p> <ol> <li>In github, klik <code>main</code> om een nieuwe branch aan te maken</li> <li>In de zoekbar, typ een nieuwe naam naar keuze, bv. <code>mijneigenvoorbeeld</code></li> <li>Klik <code>create branch mijneigenvoorbeeld from main</code></li> <li>Open de Git Bash CLI in de root van de folder van je repository</li> <li><code>git checkout -b newexample</code></li> <li>Maak nu de code/het project voor je eigen voorbeeld. Daarna:</li> <li><code>git add .</code></li> <li><code>git commit -m \"nieuw voorbeeld toegevoegd\"</code></li> <li><code>git push</code></li> <li>in GitHub, klik <code>compare and pull request</code></li> <li>Voeg een goede beschrijving toe van wat je voorbeeld doet,</li> <li>Klik <code>Create pull request</code></li> </ol>"},{"location":"sweet4x4/","title":"Sweet 4x4","text":""},{"location":"sweet4x4/#kenmerken","title":"Kenmerken","text":"<p>De Sweet 4x4 macropad is nu in zijn derde iteratie. Dit keer gebruik je een LANA TNY (of een ander XIAO / QtPy compatibel bord) als het hart van deze macropad. Je kunt kiezen voor 16 toetsen of 15 toetsen en een draaischakelaar.</p> <p></p>"},{"location":"sweet4x4/#stapsgewijze-montagegids","title":"Stapsgewijze montagegids","text":""},{"location":"sweet4x4/#overzicht","title":"Overzicht","text":"<p>Het pakket dat je hebt ontvangen bevat alles wat je nodig hebt om je eigen Sweet 4x4 te bouwen.</p> <ul> <li>15 sockets</li> <li>15 schakelaars</li> <li>16 diodes</li> <li>6 WS2812 LED's</li> <li>2 condensatoren</li> <li>1 LANA TNY</li> <li>1 roze printplaat</li> <li>Schroeven en afstandhouders <code>HOEVEEL?</code></li> </ul> <p></p>"},{"location":"sweet4x4/#sockets","title":"Sockets","text":"<p>Laten we beginnen met de laagste componenten, in dit geval de keysockets. Plaats de sockets in de gaten en soldeer de 2 SMD-pads aan de zijkanten vast. Doe dit 15 keer, tenzij je geen encoder wilt, dan kun je kiezen voor 16 sockets en toetsen. (Voor degenen die geen sockets willen, kun je ook je toetsen direct op de printplaat solderen.)</p> <p></p>"},{"location":"sweet4x4/#diodes","title":"Diodes","text":"<p>De 16 diodes moeten gebogen worden om goed op de printplaat te passen. De twee onderste hoeken zijn hiervoor ontworpen en speciaal bedoeld voor het buigen van deze onderdelen. Zodra alle diodes gebogen zijn, kun je beginnen met het solderen in de twee cirkels naast elkaar. De zwarte lijn op de diode (de kathode) moet naar buiten gericht zijn.</p> <p> </p>"},{"location":"sweet4x4/#lana-tny","title":"LANA TNY","text":"<p>Je kunt de LANA TNY module solderen met de meegeleverde doorvoerpennen OF je kunt het SMD solderen voor de laagste profieloplossing. Als je kiest voor de oppervlakmontage, kun je enkele pennen gebruiken om de module correct uit te lijnen voordat je het soldeert, zoals hieronder weergegeven.</p> <p></p>"},{"location":"sweet4x4/#ws2812-leds","title":"WS2812 LED's","text":"<p>Soldeer 6 WS2812 RGB-LED's aan de onderkant zoals aangegeven op de onderstaande afbeeldingen. Druk de LED's niet te ver naar beneden om schade aan de LED te voorkomen. Voorkom ook kortsluiting tussen de LED-pinnen en de SMD-sockets door de LED niet volledig naar de printplaat te buigen zoals weergegeven op de onderstaande afbeeldingen.</p> <p> </p>"},{"location":"sweet4x4/#condensatoren","title":"Condensatoren","text":"<p>Om de totale hoogte van het toetsenbord te verminderen, moet je de condensator buigen voordat je hem soldeert.</p> <p></p>"},{"location":"sweet4x4/#encoder","title":"Encoder","text":"<p>Als je een draaischakelaar wilt, plaats deze dan in de linkerbovenhoek van de toetsenmatrix en soldeer de 7 pinnen (5 kleinere en 2 grotere). De grotere pinnen, die voor mechanische sterkte worden gebruikt, kunnen veel soldeer nodig hebben om de gaten te vullen.</p> <p></p>"},{"location":"sweet4x4/#schakelaars","title":"Schakelaars","text":"<p><code>PLAATS AFBEELDING MET DE PLEXI-PLAAT</code></p>"},{"location":"sweet4x4/#behuizing","title":"Behuizing","text":"<p>Schroeven? Afstandhouders? Plexi?</p>"},{"location":"sweet4x4/#keycaps","title":"Keycaps","text":"<p>Klik de keycaps van jouw keuze erop.</p> <p></p>"},{"location":"sweet4x4/#n-key-rollover","title":"N-key rollover","text":"<p>Een toetsenbord met n-key rollover, of afgekort NKRO, heeft de mogelijkheid om elke toets afzonderlijk te scannen, in plaats van dat de pc dit doet. Hierdoor wordt elke ingedrukte toets geregistreerd, zelfs als je meerdere toetsen tegelijkertijd indrukt.</p> <p>Soms zie je het \"n\" in n-key rollover vervangen door een getal. Dat getal vertelt je hoeveel toetsen je tegelijkertijd kunt indrukken terwijl het toetsenbord deze registreert. Bijvoorbeeld, als je toetsenbord 6-key rollover heeft, kun je zes toetsen tegelijk indrukken met succesvolle invoer. N-key rollover is vooral relevant/nuttig voor gaming toetsenborden.</p> <p>Niet alle toetsenborden hebben n-key rollover, omdat het implementeren van deze functie bepaalde kosten en ontwerpuitdagingen met zich meebrengt.</p> <p>Om n-key rollover op deze macropad mogelijk te maken, breek je de 2 bovenste hoeken af om de kortsluiting te verbreken en gebruik je de diodes.</p>"},{"location":"sweet4x4/#firmware","title":"Firmware","text":"<p><code>PLAATS INFO</code></p>"},{"location":"en/","title":"Fri3d Camp 2024 Badge","text":"<p>So you got a cool badge, what can you do with it? ;-)</p>"},{"location":"en/#play-with-it","title":"Play with it","text":"<p>You don't need to be a programming wizard to have fun with this badge! Go to the Onboarding pages to see all the cool features we built into the standard firmware.</p> <p></p>"},{"location":"en/#program-it","title":"Program it","text":"<p>Congratulations! If you want to squash some bugs, you're going to need some tools...</p> <p></p> <ul> <li>You can use C++ in the Arduino editor, or Visual Studio Code</li> <li>If you prefer Python, you can use any plain text editor, but Visual Studio Code works too.</li> <li>If you are into homeassistant and want to connect your badge using esphome. You can either use the command line or esphome dashboard.</li> <li>If typing code is not your thing, you can drag blocks in bipes</li> </ul>"},{"location":"en/#revert-to-default-firmware","title":"Revert to Default Firmware","text":"<p>See how to reset</p>"},{"location":"en/#documentation","title":"Documentation","text":"<ul> <li>The introduction</li> <li>The hardware</li> <li>C++ examples</li> <li>pre-loaded Firmware</li> </ul>"},{"location":"en/reset/","title":"Flashing","text":"<p>After your adventures in programming yielded unexpected results, you might want to go back to the default firmware.</p>"},{"location":"en/reset/#fri3d-camp-reset-booth","title":"Fri3d Camp Reset Booth","text":"<p>During the Fri3d Camp, at the \"Badge EHBO\", we can help you! Look around for a \"badge reset firmware\" booth on the Fri3d camp. We sort of anticipated this ... :-)</p>"},{"location":"en/reset/#web-interface","title":"Web interface","text":"<p>The online flasher app works with chrome based browsers (Chrome, Edge) (not Firefox, Safari).</p> <ol> <li>download the most recent <code>full_webflasher_*.zip</code> from https://github.com/Fri3dCamp/badge_firmware/releases</li> <li>go to https://fri3d-flasher.vercel.app/</li> <li>click on icon to upload the zip file you downloaded earlier</li> <li>click \"begin te flashen\" button</li> </ol> <p>If the flashing fails because your badge keeps resetting, you can force every ESP32-based board as follows:     11. press and hold \"start\" button (this is the \"boot\" button of the microcontroller)     12. press and release \"reset\" button     13. your badge will now be ready to be flashed with a new program</p> <p>Now the device should boot into the Fri3d App.</p>"},{"location":"en/reset/#esp-idf","title":"ESP-IDF","text":"<p>This is the complicated version. Only worth it if the web flasher failed.</p> <ol> <li>if your badge seems to reset every few seconds, You can force every ESP32-based board as follows:<ol> <li>press and hold \"start\" button (this is the \"boot\" button of the microcontroller)</li> <li>press and release \"reset\" button</li> <li>your badge will now be ready to be flashed with a new program</li> </ol> </li> <li>install ESP-IDF https://docs.espressif.com/projects/esp-idf/en/stable/esp32/get-started/index.html#installation</li> <li>download the latest firmware from https://github.com/Fri3dCamp/badge_2024_micropython</li> <li>on your command line interface type:<pre><code>python -m esptool -p (PORT) -b 460800 --before default_reset --after no_reset --chip esp32s3 write_flash --flash_mode dio --flash_size 16MB --flash_freq 80m 0x0 bootloader.bin 0x8000 partition-table.bin 0x1d000 ota_data_initial.bin 0x30000 micropython.bin\n</code></pre> </li> </ol>"},{"location":"en/Retro--Go-Gaming/","title":"Retro-Go Gaming","text":"<p>Retro-Go is a program to play old (but good!) games on ESP32-based devices, such as the Fri3d Camp 2024 Badge. The project consists of a \"launcher\" and a selection of the best applications and emulators, seriously optimized to require less CPU, memory and storage, without being less compatible!</p>"},{"location":"en/Retro--Go-Gaming/#controls","title":"Controls","text":""},{"location":"en/Retro--Go-Gaming/#general-buttons","title":"General buttons","text":"<ul> <li><code>RESET</code>: restart the current app</li> <li><code>START+MENU</code> together: Exit Retro-Go, return to the Fri3d App</li> </ul>"},{"location":"en/Retro--Go-Gaming/#launcher-buttons","title":"Launcher buttons","text":"<ul> <li><code>Menu</code>: Previous screen</li> <li><code>Start</code>: Next screen</li> <li><code>X</code>: \"Options\" menu:<ul> <li>Volume of the sound</li> <li>Audio out: \"Buzzer\" that is on the badge (silent and low quality) or \"Ext(ernal) DAC\" for the Communicator or other external speakers</li> <li>Wi-Fi options:<ul> <li>Wi-Fi Access Point: activate it, connect to the hotspot and surf to http://192.168.4.1/ to manage the files on the badge</li> </ul> </li> </ul> </li> <li><code>Y</code>: Menu with \"Find games\" to search on your friends' badge for games that you don't have yet</li> <li><code>A</code>: Action</li> <li><code>B</code>: Back</li> <li>Up/Down: select menu setting</li> <li>Left/Right: Adjust menu settings</li> </ul>"},{"location":"en/Retro--Go-Gaming/#buttons-in-nes-and-gameboy-color-games","title":"Buttons in NES and Gameboy (Color) games","text":"<ul> <li><code>Start</code>: Start</li> <li><code>Menu</code>: Select (almost never needed)</li> <li><code>A</code> and <code>B</code>: Game buttons</li> </ul>"},{"location":"en/Retro--Go-Gaming/#buttons-in-doom","title":"Buttons in Doom","text":"<ul> <li><code>Menu</code>: Switch weapons</li> <li><code>Start</code>: Use (door, button, switch)</li> <li><code>X</code>: Options menu</li> <li><code>Y</code>: Game Menu</li> <li><code>A</code>: Shoot (or hit)</li> <li><code>B</code>: Walk fast or sideways</li> </ul>"},{"location":"en/Retro--Go-Gaming/#sd-card-or-internal-storage","title":"SD Card or internal storage","text":"<p>The badge will try to use the micro SD card (formatted as FAT) and if that fails, the internal storage.</p> <p>When you insert a new micro SD card, it is recommended to first fill it with the latest <code>default_files_config_and_games.zip</code> from the releases page so that you have all the correct default settings, such as wifi networks.</p>"},{"location":"en/Retro--Go-Gaming/#find-games","title":"Find games","text":"<p>If you would like to search for games that you do not have on a friend's badge, you can do so directly, without the need for a laptop or SD card reader!</p> <p>It works in 3 steps:</p> <p>1) your friend turns on his hotspot (X button -&gt; \"Wi-Fi options\" -&gt; \"Wi-Fi Access Point\" and choose one, for example \"retro-go-channel-3\")</p> <p> </p> <p>2) you connect to his hotspot (X button -&gt; \"Wi-Fi options\" -&gt; \"Wi-Fi select\" -&gt; \"retro-go-channel-3\" your friend chose)</p> <p> </p> <p>3) you are looking for games (Y button -&gt; \"Find games\" -&gt; choose a map)</p> <p> </p> <p>This might take a while, but if you get tired of it you can always stop it by restarting your badge.</p> <p>If you get an error, try again - it will skip games you already have.</p> <p>Tip: Put the best few games in a folder <code>/roms/nes/best</code>, <code>/roms/gb/best</code> or <code>/roms/gbc/best</code> and put your own games in <code>/roms/gbc/gbstu</code> so you can easily find them.</p>"},{"location":"en/Retro--Go-Gaming/#make-your-own-games","title":"Make your own games","text":"<p>With GBStudio you can easily make different types of games for GameBoy Color. If you search for 'GBStudio' on YouTube you will find a really good playlist of videos that will quickly teach you everything you need to know.</p>"},{"location":"en/Retro--Go-Gaming/#about-retro-go","title":"About Retro-Go","text":"<p>Retro-go itself has support for the Fri3d Camp 2024 Badge but the derivative version badge_retro-go contains a lot more bells and whistles that are too specific for Fri3d Camp to be included in the general version.</p>"},{"location":"en/Retro--Go-Gaming/#supported-systems","title":"Supported systems:","text":"<ul> <li>Nintendo Entertainment System (NES)</li> <li>Gameboy</li> <li>Gameboy Color</li> <li>DOOM (also mods!)</li> </ul> <p>There are other systems supported but they are not activated on the Fri3D Camp 2024 Badge because they are less popular or because they were a bit too slow.</p>"},{"location":"en/Retro--Go-Gaming/#features","title":"Features:","text":"<ul> <li>In-game menu</li> <li>Favorites and recently played games</li> <li>GameBoy color palettes, adjust and save clock</li> <li>NES color palettes, PAL ROMs, NSF support</li> <li>Options to scale and filter the screen</li> <li>Good performance and compatibility</li> <li>Turbo Speed/Fast Forward</li> <li>Cases and preview of saved game states</li> <li>Save multiple game states per game</li> <li>Manage files via wireless network</li> <li>Friend-to-friend game ROM sharing</li> <li>Piezoelectric buzzer control as primitive speaker</li> <li>Support for Fri3d Camp 2024 \"Communicator\" and other external speakers</li> </ul>"},{"location":"en/Retro--Go-Gaming/#screenshots","title":"Screenshots","text":""},{"location":"en/arduino/","title":"Index","text":"<p>download the Arduino IDE from their website</p>"},{"location":"en/arduino/#arduino-ide-setup-steps","title":"Arduino IDE setup steps","text":"<p>For the Fri3d badge to be usable in the Arduino IDE, you need to install version <code>2.0.17</code> of the esp32 board package. Below are the steps:</p>"},{"location":"en/arduino/#general-arduino-ide-setup","title":"General Arduino IDE Setup","text":"<ul> <li>From the <code>Tools</code> Menu, select <code>Boards</code> -&gt; <code>Boards Manager</code> in the Arduino IDE, then install version 2.0.17 of the esp32 package.</li> <li>Reason for version 2.0.17 is that I tried version 3.0.2 and version 3.0.2 causes compilation errors for the ESP32S3 board.</li> <li>From the <code>Tools</code> Menu, select <code>Board</code> -&gt; <code>esp32</code> -&gt; <code>ESP32S3 Dev Module</code></li> </ul>"},{"location":"en/arduino/#how-to-upload-in-arduino-ide","title":"How to Upload in Arduino IDE","text":"<ul> <li>Turn on your badge</li> <li>connect your badge via usb to your computer</li> <li>From the <code>Tools</code> Menu, select <code>Port</code> and select the entry that looks like it might be your badge.</li> <li>Click the Upload Button (right pointing arrow button in green)</li> </ul>"},{"location":"en/communicator/","title":"Communicator add-on","text":"<p>To make your communicator working, you have to go through two phases: - Hardware: assemble the hardware (soldering). - Software: flash the firmware (embedded software) to the LANA module on your communicator.</p> <p>The Hardware assembly process is laid out on this page. For the software, check out this page.</p> <p> </p>"},{"location":"en/communicator/#communicator-features","title":"Communicator features","text":"<p>The communicator is built around :</p> <ul> <li>backlit QWERTY Keyboard designed by Solder Party</li> <li>RISC-V based microcontroller board LANA TNY</li> <li>TDK ICS43434 microphone</li> <li>Analog Devices MAX98357A DAC with amplifier</li> <li>small speaker.</li> </ul> <p>You can also use the keyboard as an USB keyboard, however do not plug in the USB cable when it's connected to the badge!</p> <p>You can get the design files and sources in the GitHub repository</p> <p></p>"},{"location":"en/communicator/#step-by-step-assembly-guide","title":"Step by step assembly guide","text":""},{"location":"en/communicator/#all-components-neatly-packaged","title":"All components neatly packaged","text":"<p>The package you received contains everything you need to build your own communicator add-on</p> <ul> <li>Communicator main PCB</li> <li>Pink cover PCB</li> <li>4 x 16mm long spacers</li> <li>4 x 2mm long spacers</li> <li>speaker</li> <li>silicone keyboard</li> <li>2 x 6 pin extra long headers</li> </ul> <p></p>"},{"location":"en/communicator/#mount-the-speaker","title":"Mount the speaker","text":"<p>Remove the protective layer and glue the speaker on the PCB. Solder the 2 wire on the pads, the red wire should go the the pad marked with a <code>+</code> symbol.</p> <p> </p>"},{"location":"en/communicator/#solder-the-long-pin-headers","title":"Solder the long pin headers","text":"<p>Place the headers on the side of the component side of the board. You can use a female pin header (of even the badge) to keep the 2 pin headers properly aligned while soldering</p> <p></p>"},{"location":"en/communicator/#mount-the-keys","title":"Mount the keys","text":"<p>Snap in the 2mm spacers in the pink cover. place the silicone keyboard in the PCB and snap in into the communicator PCB.</p> <p> </p>"},{"location":"en/communicator/#mount-the-communicator","title":"Mount the communicator","text":"<p>Snap in the 16mm long spacers in the 4 holes, mount it on the back of the badge in place of the protective backplate.</p> <p> </p>"},{"location":"en/communicator/#usage","title":"Usage","text":"<p>The keyboard presents itself as a HID input device. The <code>Fn</code> key can be used to trigger special functions:</p> <ul> <li><code>Fn+Red Square</code>: Put LANA LED to red</li> <li><code>Fn+Orange Triangle</code>: Put LANA LED to orange</li> <li><code>Fn+Yellow Fri3d logo</code>: Put LANA LED to yellow</li> <li><code>Fn+Green Circle</code>: Put LANA LED to green</li> <li><code>Fn+Blue Three-Leaf-Clover</code>: Put LANA LED to blue</li> <li><code>Fn+Purple Rhombus</code>: Put LANA LED to purple</li> <li><code>Fn+Solder Party</code>: Put LANA LED off</li> <li><code>Fn+Backspace</code>: Delete</li> <li><code>Fn+Up</code>: Page Up</li> <li><code>Fn+Down</code>: Page Down</li> <li><code>Fn+Left</code>: Home</li> <li><code>Fn+Right</code>: End</li> <li><code>Fn+Spacebar</code>: Toggle keyboard backlight</li> <li><code>Fn+Right Shift</code>: Toggle Caps Lock</li> </ul>"},{"location":"en/communicator/#firmware-features","title":"Firmware features","text":"<p>The firmware outputs HID report packets (8 bytes) on USB, I2C (address <code>0x38</code>) and UART.</p> <p>The first byte indicates the modifier keys that have been pressed:</p> Bit Modifier Key 0 LEFT CTRL 1 LEFT SHIFT 2 LEFT ALT 3 LEFT GUI 4 RIGHT CTRL 5 RIGHT SHIFT 6 RIGHT ALT 7 RIGHT GUI <p>The second byte is reserved, the remaining 6 bytes can contain a HID keycode.</p> <p> </p>"},{"location":"en/communicator/#software-firmware","title":"SOFTWARE (FIRMWARE)","text":"<p>Normally, the firmware on your LANA module is already pre-flashed. If it doesn't work: the firmware can be flashed through the <code>badge flash station</code> in the solder area.</p> <p>If you want to update the firmware, or you want to flash your own, you can do so with your own laptop as shown on this page.</p>"},{"location":"en/communicator/programming/","title":"Programming the LANA Module","text":"<p>To program the small LANA module on your <code>communicator</code>, you can use either Embeetle IDE or Mounriver Studio. </p> <p> </p>"},{"location":"en/communicator/programming/#embeetle-ide","title":"Embeetle IDE","text":"<p>Embeetle is an IDE of Belgian make. The LANA can be programmed directly via the USB-C connector but also with the WCH-Link debugger, which gives extra debugging options. Click here For the complete documentation on how to program the LANA module in Embeetle. The steps below show how to get started quickly to program your LANA module via its USB-C port.</p> <p> </p>"},{"location":"en/communicator/programming/#step-1-download-embeetle-ide","title":"STEP 1: Download Embeetle IDE","text":"<p>First download Embeetle:  - https://embeetle.com/downloads</p> <p>You can download it for either Windows or Linux. We don't have MAC support yet.</p> <p></p> <p> </p>"},{"location":"en/communicator/programming/#step-2-launch-the-lana-tny-01-communicator-2024-project","title":"STEP 2: Launch the <code>lana-tny-01-communicator-2024</code> project","text":"<p>Launch Embeetle and click 'CREATE PROJECT':</p> <p></p> <p>  Then select <code>WCH</code> for the vendor (that's the vendor of the microcontroller) and look for the project <code>lana-tny-01-communicator-2024</code>:</p> <p></p> <p>  Now click <code>CREATE</code> at the bottom. Embeetle IDE will download the sample project and also all the required tools automatically. Then the project opens:</p> <p></p> <p> </p>"},{"location":"en/communicator/programming/#step-3-plug-in-the-board","title":"STEP 3: Plug in the board","text":"<p>FIRST press the <code>BOOT</code> switch, THEN plug your board into the computer with a USB-C cable (while keeping the <code>BOOT</code> switch pressed):</p> <p></p> <p>When the board is plugged in, you can release the <code>BOOT</code> switch. This procedure ensures that your board is now in \"bootloader mode\". That means the microcontroller is ready to receive a new firmware!</p> <p> </p>"},{"location":"en/communicator/programming/#step-4-flash-the-firmware","title":"STEP 4: Flash the firmware","text":"<p>Now click the <code>flash</code> button at the top in Embeetle IDE. Embeetle will try to flash the firmware to the LANA module. However, you might experience the following error now: <pre><code>Failed to open USB device: Bus 001 Device 008: ID 4348:55e0\nError: Failed to open USB device on Windows\n</code></pre> On Linux you might experience another issue: <pre><code>Failed to open USB device: Bus 003 Device 010: ID 4348:55e0\nError: Failed to open USB device on Linux due to no enough permission\n</code></pre> Let's fix this.</p> <p> </p>"},{"location":"en/communicator/programming/#step-5a-install-zadig-windows-only","title":"STEP 5a: Install Zadig (Windows only)","text":"<p>You must install Zadig and replace the driver for the USB device with the WinUSB driver. First, download Zadig: </p> <p></p> <p>  Then, open Zadig and select Options -&gt; List All Devices:</p> <p></p> <p>  Select USB Module from the list of devices and choose WinUSB as the driver. Then click Replace Driver:</p> <p></p> <p>  Wait for the driver installation to complete:</p> <p></p> <p>  Success:</p> <p></p> <p>  Try again in Embeetle IDE. It should work now:</p> <pre><code>\"C:/Users/krist/EMBEETLE IDE/embeetle/beetle_tools/windows/wchisp_0.2.2_64b/wchisp.exe\" flash application.elf\n14:57:06 [INFO] Chip: CH32V203G6U6[0x3619] (Code Flash: 32KiB)\n14:57:06 [INFO] Chip UID: CD-AB-19-97-D0-BC-B6-FF\n14:57:06 [INFO] BTVER(bootloader ver): 02.70\n14:57:06 [INFO] Code Flash protected: false\n14:57:06 [INFO] Current config registers: a55aff0000ff00ffffffffff00020700cdab1997d0bcb6ff\nRDPR_USER: 0x00FF5AA5\n  [7:0]   RDPR 0xA5 (0b10100101)\n    `- Unprotected\n  [16:16] IWDG_SW 0x1 (0b1)\n    `- IWDG enabled by the software, and disabled by hardware\n  [17:17] STOP_RST 0x1 (0b1)\n    `- Disable\n  [18:18] STANDBY_RST 0x1 (0b1)\n    `- Disable, entering standby-mode without RST\n  [23:22] SRAM_CODE_MODE 0x3 (0b11)\n    `- CODE-228KB + RAM-32KB / CODE-160KB + RAM-32KB depending on the chip\nDATA: 0xFF00FF00\n  [7:0]   DATA0 0x0 (0b0)\n  [23:16] DATA1 0x0 (0b0)\nWRP: 0xFFFFFFFF\n  `- Unprotected\n14:57:06 [INFO] Read application.elf as ELF format\n14:57:06 [INFO] Found loadable segment, physical address: 0x00000000, virtual address: 0x00000000, flags: 0x5\n14:57:06 [INFO] Section names: [\".init\", \".vector\", \".text\"]\n14:57:06 [INFO] Found loadable segment, physical address: 0x00000dbc, virtual address: 0x20000000, flags: 0x6\n14:57:06 [INFO] Section names: [\".data\"]\n14:57:06 [INFO] Firmware size: 4096\n14:57:06 [INFO] Erasing...\n14:57:06 [WARN] erase_code: set min number of erased sectors to 8\n14:57:06 [INFO] Erased 8 code flash sectors\n14:57:07 [INFO] Erase done\n14:57:07 [INFO] Writing to code flash...\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 4096/409614:57:07 [INFO] Code flash 4096 bytes written\n14:57:08 [INFO] Verifying...\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 4096/409614:57:08 [INFO] Verify OK\n14:57:08 [INFO] Now reset device and skip any communication errors\n14:57:08 [INFO] Device reset\n</code></pre> <p>If it didn't work, pull out the LANA module and plug it back into your computer while pressing the <code>BOOT</code> switch (release the button a few seconds after you plugged it into the computer), to ensure it really is in \"bootloader mode\". If it still doesn't work, don't hesitate to contact us:  - Email: kristof@embeetle.com  - Whatsapp: +32(0) 496 90 75 44  - Discord: @kristof-at-embeetle</p> <p> </p>"},{"location":"en/communicator/programming/#step-5b-add-device-to-plugdev-group-linux-only","title":"STEP 5b: Add device to plugdev group (Linux only)","text":"<p>On Linux you'll have to add the device to the plugdev group. First check groups related to the current user: <pre><code>$ groups `whoami`\nkristof : kristof adm cdrom sudo dip plugdev lpadmin lxd sambashare\n</code></pre> If <code>plugdev</code> would not be listed, add the current user to that group:  <pre><code>$ sudo useradd -G plugdev `whoami`\n</code></pre> Figure out your device's Vendor ID and Product ID through the <code>$ lsusb</code> command:  <pre><code>$ lsusb\nBus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\nBus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub\nBus 003 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\nBus 003 Device 002: ID 046d:c548 Logitech, Inc. Logi Bolt Receiver\nBus 003 Device 003: ID 1a40:0101 Terminus Technology Inc. Hub\nBus 003 Device 004: ID 04f2:b75c Chicony Electronics Co., Ltd FHD Webcam\nBus 003 Device 005: ID 1a2c:4324 China Resource Semico Co., Ltd USB Keyboard\nBus 003 Device 006: ID 048d:6005 Integrated Technology Express, Inc. ITE Device(8291)\nBus 003 Device 007: ID 1bcf:2701 Sunplus Innovation Technology Inc. HD 720P webcam\nBus 003 Device 008: ID 048d:ce00 Integrated Technology Express, Inc. ITE Device(8291)\nBus 003 Device 009: ID 8087:0026 Intel Corp. AX201 Bluetooth\nBus 003 Device 011: ID 4348:55e0 WinChipHead\nBus 004 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub\nBus 004 Device 002: ID 0bda:0316 Realtek Semiconductor Corp. Card Reader\n</code></pre> Look for the line with <code>WinChipHead</code> (third to last). As you can see, the ID for my device consists of two 4-digit hex numbers: <code>ID 4348:55e0</code>. The first one is the Vendor ID, the second one the Product ID. Do not confuse them! </p> <p>In the console, navigate to <code>/etc/udev/rules.d</code> and list the contents of the directory: <pre><code>$ cd /etc/udev/rules.d\n$ ls\n70-snap.core.rules\n70-snap.firefox.rules\n70-snap.snap-store.rules\n</code></pre> Now create a new file, for example with the gedit editor:  <pre><code>$ sudo gedit 10-probe.rules\n</code></pre> You can name this file whatever you want, so long as it ends in <code>.rules</code>. Rules files by convention begin with a number. Linux parses rules files in lexical order, and the number makes it easy to see which files will be parsed first. Choosing a low number (like 10, as above) means that your file will be parsed before system rules files.</p> <p>Now you need to add a line in the file that represents your device. If the file already existed (from a previous device you added this way), you can leave all the content as-is and just add a line at the bottom. The line you need to add is: <pre><code>ATTRS{idVendor}==\"4348\", ATTRS{idProduct}==\"55e0\", MODE=\"666\", GROUP=\"plugdev\"\n</code></pre> Note: In older Ubuntu/Linux installations, you might need to replace 'ATTRS' with 'SYSFS' in the line below.</p> <p>Of course, fill in your own Vendor ID and Product ID! (although the ones above should be correct for the <code>LANA-TNY-01</code> board). Save the file and close it. Now you need to tell Linux to reload the udev rules: <pre><code>$ sudo udevadm trigger\n</code></pre> Any member of the plugdev group should now be able to run <code>wchisp</code> without using sudo. </p> <p>Try again to flash in Embeetle IDE. If it doesn't work, pull out the LANA module and plug it back into your computer while pressing the <code>BOOT</code> switch (release the button a few seconds after you plugged it into the computer), to ensure it really is in \"bootloader mode\". If it still doesn't work, don't hesitate to contact us:  - Email: kristof@embeetle.com  - Whatsapp: +32(0) 496 90 75 44  - Discord: @kristof-at-embeetle</p> <p> </p>"},{"location":"en/communicator/programming/#mounriver-studio","title":"Mounriver Studio","text":"<p>Mounriver is an IDE based on eclipse released by the chipmaker WCH. This works on Windows and there is a version for linux and possibly also for Mac, but the last 2 are a bit behind. Mounriver also gives false reports of viruses on many systems and violates the GPL license conditions of the GCC Compiler.</p> <p> </p>"},{"location":"en/communicator/programming/#notes-on-lana-module","title":"Notes on LANA module","text":"<p>If you are going to work with the LANA TNY yourself, you have to pay attention to 1 thing (regardless of the IDE) that is that LANA does not have an external clock and must use the internal clock (HSI), this is also stated in the default sketch of Embeetle. If you accidentally \"brick\" your LANA board, you can usually unbrick it via USB or by using the power reset feature of the WCHISPTool.</p>"},{"location":"en/esphome/","title":"ESPHome documentation","text":"<p>This page contains reference code for each badge component. It currently assumes you have esphome installed and are familiar adding a device.</p>"},{"location":"en/esphome/#common-code","title":"Common code","text":"<pre><code>substitutions:\n  esphome_name: fri3d2024\n\nesphome:\n  name: ${esphome_name}\n\nesp32:\n  board: esp32-s3-devkitc-1\n  framework:\n    type: arduino\n</code></pre>"},{"location":"en/esphome/#display","title":"Display","text":"<pre><code>spi:\n  clk_pin: GPIO7\n  mosi_pin: GPIO6\n\ndisplay:\n  - platform: ili9xxx\n    model: ST7789V\n    dimensions:\n      height: 240\n      width: 296\n    transform:\n      swap_xy: true\n      mirror_x: false\n    data_rate: 80MHz\n    dc_pin: GPIO4\n    cs_pin: GPIO5\n    reset_pin: GPIO48\n    auto_clear_enabled: false\n    lambda: |-\n      it.image(0, 0, id(my_image));\n#      it.print(0, 0, id(my_font), \"Hello World!\");\n#      it.printf(0, 15, id(my_font), TextAlign::BASELINE_LEFT, \"%.1f graden\", id(temperature).state);\n# sensor.living_room_temperature\n#      it.line(0, 0, 50, 50);\n\nfont:\n  - file: \"opensans.ttf\"\n    id: my_font\n    size: 20\n\nimage:\n  - file: \"fri3d.png\"\n    id: my_image\n    type: RGB24\n</code></pre> <p>TODO</p> <ul> <li>refresh log error</li> </ul>"},{"location":"en/esphome/#status-light","title":"Status light","text":"<pre><code>light:\n  - platform: status_led\n    name: \"State\"\n    id: \"state\"\n    pin: GPIO21\n</code></pre>"},{"location":"en/esphome/#rgb-leds","title":"RGB leds","text":"<pre><code>light:\n  - platform: neopixelbus\n    type: GRB\n    variant: WS2812\n    pin: GPIO12\n    num_leds: 5\n    name: \"NeoPixel Light\"\n</code></pre>"},{"location":"en/esphome/#buttons","title":"Buttons","text":"<pre><code>binary_sensor:\n  - platform: gpio\n    pin:\n      number: GPIO39\n      mode:\n        input: true\n        pullup: true\n      inverted: true\n    name: \"A\"\n  - platform: gpio\n    pin:\n      number: GPIO40\n      mode:\n        input: true\n        pullup: true\n      inverted: true\n    name: \"B\"\n  - platform: gpio\n    pin:\n      number: GPIO38\n      mode:\n        input: true\n        pullup: true\n      inverted: true\n    name: \"X\"\n  - platform: gpio\n    pin:\n      number: GPIO41\n      mode:\n        input: true\n        pullup: true\n      inverted: true\n    name: \"Y\"\n  - platform: gpio\n    pin:\n      number: GPIO45\n      mode:\n        input: true\n        pullup: true\n      inverted: true\n    name: \"menu\"\n  - platform: gpio\n    pin:\n      number: GPIO0\n      mode:\n        input: true\n        #pullup: true\n      inverted: true\n    name: \"start\"\n</code></pre>"},{"location":"en/esphome/#buzzer","title":"Buzzer","text":"<p>TODO</p> <ul> <li>test</li> </ul>"},{"location":"en/esphome/#ir-receiver","title":"IR Receiver","text":"<pre><code>remote_receiver:\n  pin:\n    number: GPIO11\n    inverted: true\n    mode:\n      input: true\n      pullup: true\n  dump: all\n</code></pre> <p>TODO</p> <ul> <li>test</li> </ul>"},{"location":"en/esphome/#battery-monitor","title":"Battery monitor","text":"<p>TODO</p> <ul> <li>test</li> </ul>"},{"location":"en/esphome/#sd-card","title":"SD Card","text":"<p>TODO</p> <ul> <li>define use case</li> </ul>"},{"location":"en/flamingo/","title":"Big Flamingo Gun 9000","text":"<p>To make your Flamingo Gun working, you have to go through two phases: - Hardware: assemble the hardware (soldering). - Software: flash the firmware (embedded software) to the LANA module on your Flamingo Gun.</p> <p>The Hardware assembly process is laid out on this page. For the software, check out this page.</p> <p> </p>"},{"location":"en/flamingo/#features","title":"Features","text":"<p>The flamingo blaster is built around basic components: </p> <ul> <li>an IR LED </li> <li>2 IR receivers</li> <li>4 WS2812 LEDs </li> <li>RISC-V based microcontroller board LANA TNY</li> </ul> <p></p>"},{"location":"en/flamingo/#step-by-step-assembly-guide","title":"Step by step assembly guide","text":""},{"location":"en/flamingo/#all-components-neatly-packaged","title":"All components neatly packaged","text":"<p>The package you received has everything you need to build your own flamingo blaster.</p> <ul> <li>1 IR LED</li> <li>1 team selector switch</li> <li>1 large blue capacitor</li> <li>1 buzzer</li> <li>1 trigger pushbutton</li> <li>1 long strip of pin headers (to be split in half)</li> <li>1 single pin header</li> <li>1 MOSFET</li> <li>1 LANA TNY</li> <li>1 pink PCB</li> <li>1 badge link cable</li> <li>2 IR receivers</li> <li>2 resistors</li> <li>2 badge link connectors</li> <li>3 yellow capacitors (100nF)</li> <li>4 WS2812 LEDs</li> </ul> <p></p>"},{"location":"en/flamingo/#start-soldering","title":"Start soldering","text":"<p>There is no bad order in which to solder the parts, we dop however suggest starting with the lowest profile parts first. </p>"},{"location":"en/flamingo/#resistors","title":"Resistors","text":"<p>The package contains a larger 33R resistor and a smaller 1k resistor. </p> <p></p>"},{"location":"en/flamingo/#team-switch-and-speaker","title":"Team switch and speaker","text":"<p>The next components with a low profile are the buzzer buzzer (no polarity) and the team switch. Mount the switch with the actuator facing away from the PCB.</p> <p></p>"},{"location":"en/flamingo/#ir-led","title":"IR LED","text":"<p>The infrared LED does have a polarity. Mounting it the wrong way around results in a non-functional blaster. The long lead of the LED should go in the square hole with the <code>+</code> symbol next to it. Make sure you leave some room in order to bend te LED forward (or even better, bend it before soldering it!)</p> <p></p> <p></p>"},{"location":"en/flamingo/#ir-receivers","title":"IR receivers","text":"<p>The 2 IR receivers mount directions are indicated by an arrow. This arrow points towards the direction the pins should go.</p> <p></p> <p></p>"},{"location":"en/flamingo/#rgb-leds","title":"RGB LEDs","text":"<p>The RGB LEDs have 4 leads, the longest lead should go in the hole marked with the letter <code>c</code> . Once inserted, bend the LED before soldering. This allows you to slightly adjust the alignment before fixing them in place.</p> <p></p> <p></p>"},{"location":"en/flamingo/#trigger-button","title":"Trigger button","text":"<p>If you're right handed, solder the trigger switch on the side with all the other components. </p> <p></p>"},{"location":"en/flamingo/#lana-tny-module","title":"LANA TNY module","text":"<p>Use the large and single pin header to solder the LANA TNY module. Break the long pin header in 2 for the sides. Place the pins in the flamingo and align the LANA module on top of it. Alternate soldering the pins to prevent the pin header melting.</p> <p></p> <p></p>"},{"location":"en/flamingo/#condesators","title":"Condesators","text":"<p>The large blue condesator, just as the IR LED, has a long lead indicating the anode of this part. This longer lead should go in the hole marked with the <code>+</code> pin.</p> <p>The smaller yellow condensators can be mounted either way.</p> <p></p> <p></p>"},{"location":"en/flamingo/#badge-link-connector","title":"Badge link connector","text":"<p>Last part is the badge link connector. This 3.5mm audio jack is soldered on the same side as all the other components</p> <p></p>"},{"location":"en/flamingo/#finished-blaster","title":"Finished blaster","text":"<p>If everything goes according to plan you should now have a functional blaster.</p> <p></p>"},{"location":"en/flamingo/#mount-the-connector-on-your-badge","title":"Mount the connector on your badge","text":"<p>Now all that is left to do is adding the badge link connector to your badge. Mount this connector on the back side of badge (the same side as the wireless module and battery).</p> <p></p> <p></p> <p>Make sure there is no short circuit between the single pin and the decorative design on the badge!</p> <p></p>"},{"location":"en/flamingo/#notes","title":"Notes","text":"<p>Hardware design files and Firmware sources can be found in the GitHub repository.</p> <p> </p>"},{"location":"en/flamingo/#software-firmware","title":"SOFTWARE (FIRMWARE)","text":"<p>Normally, the firmware on your LANA module is already pre-flashed. If it doesn't work: the firmware can be flashed through the <code>badge flash station</code> in the solder area.</p> <p>If you want to update the firmware, or you want to flash your own, you can do so with your own laptop as shown on this page.</p>"},{"location":"en/flamingo/programming/","title":"Programming the LANA Module","text":"<p>To program the small LANA module on your <code>blaster</code> (flamingo), you can use either Embeetle IDE or Mounriver Studio. </p> <p> </p>"},{"location":"en/flamingo/programming/#embeetle-ide","title":"Embeetle IDE","text":"<p>Embeetle is an IDE of Belgian make. The LANA can be programmed directly via the USB-C connector but also with the WCH-Link debugger, which gives extra debugging options. Click here For the complete documentation on how to program the LANA module in Embeetle. The steps below show how to get started quickly to program your LANA module via its USB-C port.</p> <p> </p>"},{"location":"en/flamingo/programming/#step-1-download-embeetle-ide","title":"STEP 1: Download Embeetle IDE","text":"<p>First download Embeetle:  - https://embeetle.com/downloads</p> <p>You can download it for either Windows or Linux. We don't have MAC support yet.</p> <p></p> <p> </p>"},{"location":"en/flamingo/programming/#step-2-launch-the-lana-tny-01-blaster-2024-project","title":"STEP 2: Launch the <code>lana-tny-01-blaster-2024</code> project","text":"<p>Launch Embeetle and click 'CREATE PROJECT':</p> <p></p> <p>  Then select <code>WCH</code> for the vendor (that's the vendor of the microcontroller) and look for the project <code>lana-tny-01-blaster-2024</code>:</p> <p></p> <p>  Now click <code>CREATE</code> at the bottom. Embeetle IDE will download the sample project and also all the required tools automatically. Then the project opens:</p> <p></p> <p> </p>"},{"location":"en/flamingo/programming/#step-3-plug-in-the-board","title":"STEP 3: Plug in the board","text":"<p>FIRST press the <code>BOOT</code> switch, THEN plug your board into the computer with a USB-C cable (while keeping the <code>BOOT</code> switch pressed):</p> <p></p> <p>When the board is plugged in, you can release the <code>BOOT</code> switch. This procedure ensures that your board is now in \"bootloader mode\". That means the microcontroller is ready to receive a new firmware!</p> <p> </p>"},{"location":"en/flamingo/programming/#step-4-flash-the-firmware","title":"STEP 4: Flash the firmware","text":"<p>Now click the <code>flash</code> button at the top in Embeetle IDE. Embeetle will try to flash the firmware to the LANA module. However, you might experience the following error now: <pre><code>Failed to open USB device: Bus 001 Device 008: ID 4348:55e0\nError: Failed to open USB device on Windows\n</code></pre> On Linux you might experience another issue: <pre><code>Failed to open USB device: Bus 003 Device 010: ID 4348:55e0\nError: Failed to open USB device on Linux due to no enough permission\n</code></pre> Let's fix this.</p> <p> </p>"},{"location":"en/flamingo/programming/#step-5a-install-zadig-windows-only","title":"STEP 5a: Install Zadig (Windows only)","text":"<p>You must install Zadig and replace the driver for the USB device with the WinUSB driver. First, download Zadig: </p> <p></p> <p>  Then, open Zadig and select Options -&gt; List All Devices:</p> <p></p> <p>  Select USB Module from the list of devices and choose WinUSB as the driver. Then click Replace Driver:</p> <p></p> <p>  Wait for the driver installation to complete:</p> <p></p> <p>  Success:</p> <p></p> <p>  Try again in Embeetle IDE. It should work now:</p> <pre><code>\"C:/Users/krist/EMBEETLE IDE/embeetle/beetle_tools/windows/wchisp_0.2.2_64b/wchisp.exe\" flash application.elf\n14:57:06 [INFO] Chip: CH32V203G6U6[0x3619] (Code Flash: 32KiB)\n14:57:06 [INFO] Chip UID: CD-AB-19-97-D0-BC-B6-FF\n14:57:06 [INFO] BTVER(bootloader ver): 02.70\n14:57:06 [INFO] Code Flash protected: false\n14:57:06 [INFO] Current config registers: a55aff0000ff00ffffffffff00020700cdab1997d0bcb6ff\nRDPR_USER: 0x00FF5AA5\n  [7:0]   RDPR 0xA5 (0b10100101)\n    `- Unprotected\n  [16:16] IWDG_SW 0x1 (0b1)\n    `- IWDG enabled by the software, and disabled by hardware\n  [17:17] STOP_RST 0x1 (0b1)\n    `- Disable\n  [18:18] STANDBY_RST 0x1 (0b1)\n    `- Disable, entering standby-mode without RST\n  [23:22] SRAM_CODE_MODE 0x3 (0b11)\n    `- CODE-228KB + RAM-32KB / CODE-160KB + RAM-32KB depending on the chip\nDATA: 0xFF00FF00\n  [7:0]   DATA0 0x0 (0b0)\n  [23:16] DATA1 0x0 (0b0)\nWRP: 0xFFFFFFFF\n  `- Unprotected\n14:57:06 [INFO] Read application.elf as ELF format\n14:57:06 [INFO] Found loadable segment, physical address: 0x00000000, virtual address: 0x00000000, flags: 0x5\n14:57:06 [INFO] Section names: [\".init\", \".vector\", \".text\"]\n14:57:06 [INFO] Found loadable segment, physical address: 0x00000dbc, virtual address: 0x20000000, flags: 0x6\n14:57:06 [INFO] Section names: [\".data\"]\n14:57:06 [INFO] Firmware size: 4096\n14:57:06 [INFO] Erasing...\n14:57:06 [WARN] erase_code: set min number of erased sectors to 8\n14:57:06 [INFO] Erased 8 code flash sectors\n14:57:07 [INFO] Erase done\n14:57:07 [INFO] Writing to code flash...\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 4096/409614:57:07 [INFO] Code flash 4096 bytes written\n14:57:08 [INFO] Verifying...\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 4096/409614:57:08 [INFO] Verify OK\n14:57:08 [INFO] Now reset device and skip any communication errors\n14:57:08 [INFO] Device reset\n</code></pre> <p>If it didn't work, pull out the LANA module and plug it back into your computer while pressing the <code>BOOT</code> switch (release the button a few seconds after you plugged it into the computer), to ensure it really is in \"bootloader mode\". If it still doesn't work, don't hesitate to contact us:  - Email: kristof@embeetle.com  - Whatsapp: +32(0) 496 90 75 44  - Discord: @kristof-at-embeetle</p> <p> </p>"},{"location":"en/flamingo/programming/#step-5b-add-device-to-plugdev-group-linux-only","title":"STEP 5b: Add device to plugdev group (Linux only)","text":"<p>On Linux you'll have to add the device to the plugdev group. First check groups related to the current user: <pre><code>$ groups `whoami`\nkristof : kristof adm cdrom sudo dip plugdev lpadmin lxd sambashare\n</code></pre> If <code>plugdev</code> would not be listed, add the current user to that group:  <pre><code>$ sudo useradd -G plugdev `whoami`\n</code></pre> Figure out your device's Vendor ID and Product ID through the <code>$ lsusb</code> command:  <pre><code>$ lsusb\nBus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\nBus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub\nBus 003 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\nBus 003 Device 002: ID 046d:c548 Logitech, Inc. Logi Bolt Receiver\nBus 003 Device 003: ID 1a40:0101 Terminus Technology Inc. Hub\nBus 003 Device 004: ID 04f2:b75c Chicony Electronics Co., Ltd FHD Webcam\nBus 003 Device 005: ID 1a2c:4324 China Resource Semico Co., Ltd USB Keyboard\nBus 003 Device 006: ID 048d:6005 Integrated Technology Express, Inc. ITE Device(8291)\nBus 003 Device 007: ID 1bcf:2701 Sunplus Innovation Technology Inc. HD 720P webcam\nBus 003 Device 008: ID 048d:ce00 Integrated Technology Express, Inc. ITE Device(8291)\nBus 003 Device 009: ID 8087:0026 Intel Corp. AX201 Bluetooth\nBus 003 Device 011: ID 4348:55e0 WinChipHead\nBus 004 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub\nBus 004 Device 002: ID 0bda:0316 Realtek Semiconductor Corp. Card Reader\n</code></pre> Look for the line with <code>WinChipHead</code> (third to last). As you can see, the ID for my device consists of two 4-digit hex numbers: <code>ID 4348:55e0</code>. The first one is the Vendor ID, the second one the Product ID. Do not confuse them! </p> <p>In the console, navigate to <code>/etc/udev/rules.d</code> and list the contents of the directory: <pre><code>$ cd /etc/udev/rules.d\n$ ls\n70-snap.core.rules\n70-snap.firefox.rules\n70-snap.snap-store.rules\n</code></pre> Now create a new file, for example with the gedit editor:  <pre><code>$ sudo gedit 10-probe.rules\n</code></pre> You can name this file whatever you want, so long as it ends in <code>.rules</code>. Rules files by convention begin with a number. Linux parses rules files in lexical order, and the number makes it easy to see which files will be parsed first. Choosing a low number (like 10, as above) means that your file will be parsed before system rules files.</p> <p>Now you need to add a line in the file that represents your device. If the file already existed (from a previous device you added this way), you can leave all the content as-is and just add a line at the bottom. The line you need to add is: <pre><code>ATTRS{idVendor}==\"4348\", ATTRS{idProduct}==\"55e0\", MODE=\"666\", GROUP=\"plugdev\"\n</code></pre> Note: In older Ubuntu/Linux installations, you might need to replace 'ATTRS' with 'SYSFS' in the line below.</p> <p>Of course, fill in your own Vendor ID and Product ID! (although the ones above should be correct for the <code>LANA-TNY-01</code> board). Save the file and close it. Now you need to tell Linux to reload the udev rules: <pre><code>$ sudo udevadm trigger\n</code></pre> Any member of the plugdev group should now be able to run <code>wchisp</code> without using sudo. </p> <p>Try again to flash in Embeetle IDE. If it doesn't work, pull out the LANA module and plug it back into your computer while pressing the <code>BOOT</code> switch (release the button a few seconds after you plugged it into the computer), to ensure it really is in \"bootloader mode\". If it still doesn't work, don't hesitate to contact us:  - Email: kristof@embeetle.com  - Whatsapp: +32(0) 496 90 75 44  - Discord: @kristof-at-embeetle</p> <p> </p>"},{"location":"en/flamingo/programming/#mounriver-studio","title":"Mounriver Studio","text":"<p>Mounriver is an ide based on eclipse released by the chipmaker WCH. This works on Windows and there is a version for linux and possibly also for Mac, but the last 2 are a bit behind. Mounriver also gives false reports of viruses on many systems and violates the GPL license conditions of the GCC Compiler.</p> <p> </p>"},{"location":"en/flamingo/programming/#notes-on-lana-module","title":"Notes on LANA module","text":"<p>If you are going to work with the blaster/LANA TNY yourself, you have to pay attention to 1 thing (regardless of the IDE) that is that LANA does not have an external clock and must use the internal clock (HSI), this is also stated in the default sketch of Embeetle. If you accidentally \"brick\" your LANA board, you can usually unbrick it via USB or by using the power reset feature of the WCHISPTool.</p>"},{"location":"en/micropython/","title":"MicroPython documentation","text":""},{"location":"en/micropython/#start-micropython","title":"Start micropython","text":"<p>Ensure your badge is upgraded to the latest version. Boot the badge in de main menu and choose 'MicroPython'. The badge reboots and you get a black screen (the dark magic is inside).</p> <p>By default, the badge will not reboot into MicroPython on reset. Should you want this, you need to confirm the switch to MicroPython was successful. You can do this like this:</p> <p><pre><code>    from fri3d import boot\n    boot.persist()\n</code></pre> Note that now you no longer can get back to the main menu. To switch back you need to do this: <pre><code>    from fri3d import boot\n    boot.main_menu()\n</code></pre></p>"},{"location":"en/micropython/#badge-examples","title":"Badge Examples","text":"<p>There are examples installed on the badge itself.</p> <p>You can explore these with ViperIDE</p>"},{"location":"en/micropython/lvgl/","title":"LVGL","text":"<p>badge_2024_micropython is built with LVLG v9.1 included</p>"},{"location":"en/micropython/lvgl/#links","title":"links","text":"<ul> <li>lvgl homepage https://lvgl.io/</li> <li>lvgl documentation https://docs.lvgl.io/9.1/</li> </ul>"},{"location":"en/micropython/lvgl/#python-examples-v84","title":"python examples (v8.4)","text":"<p>Unfortunately for v9.x the python examples are not available any more This are the main differences between v8.x and v9.x https://docs.lvgl.io/9.0/CHANGELOG.html and more specific https://docs.lvgl.io/9.0/CHANGELOG.html#general-api-changes - lvgl live python examples (v8.4) https://docs.lvgl.io/8.4/examples.html - lvgl python examples source code (v8.4) (search for *.py files) https://github.com/lvgl/lvgl/tree/v8.4.0/examples</p>"},{"location":"en/micropython/lvgl/#online-simulator","title":"online simulator","text":"<p>There is an online micropython + lvgl (v9.0) simulator available https://sim.lvgl.io/v9.0/micropython/ports/webassembly/index.html This is very convenient to prototype new screens</p>"},{"location":"en/micropython/lvgl/#button","title":"button","text":"<pre><code># Initialize\nimport display_driver\nimport lvgl as lv\ndisp = lv.display_get_default()\ndisp.set_resolution(296,240)\n\n# Create a button with a label\nscr = lv.obj()\n\nbtn = lv.button(scr)\nbtn.align(lv.ALIGN.CENTER, 0, 0)\nlabel = lv.label(btn)\nlabel.set_text('Hello World!')\n\nlv.screen_load(scr)\n</code></pre>"},{"location":"en/micropython/lvgl/#button-in-a-class-with-callback-remembering-state","title":"button in a class with callback, remembering state","text":"<pre><code># Initialize\n\nimport display_driver\nimport lvgl as lv\n\ndisp = lv.display_get_default()\ndisp.set_resolution(296,240)\n\nclass CounterBtn:\n    def __init__(self):\n        screen = lv.screen_active()\n\n        screen.set_style_bg_color(lv.palette_darken(lv.PALETTE.GREY, 4), lv.PART.MAIN)\n\n        self.btn = lv.button(screen)\n        self.btn.align(lv.ALIGN.CENTER, 0, 0)\n\n        self.lbl = lv.label(self.btn)\n        self.lbl.set_text(\"Button\")\n\n        self.cnt = 0\n\n        self.btn.add_event_cb(self.btn_cb, lv.EVENT.ALL, None)\n\n    def btn_cb(self, evt):\n        code = evt.get_code()\n\n        if code == lv.EVENT.CLICKED:\n            self.cnt += 1\n            print(self.cnt)\n\n            self.lbl.set_text(\"Button: \" + str(self.cnt))\n\n\ncounter_btn = CounterBtn()\n</code></pre>"},{"location":"en/micropython/lvgl/#wifi-config-screen","title":"wifi-config screen","text":"<pre><code># Initialize\n\nimport display_driver\nimport lvgl as lv\n\ndisp = lv.display_get_default()\ndisp.set_resolution(296,240)\n\n\n\n\nclass TextArea:\n    def __init__(self, screen):\n        self._screen = screen\n        self.ta = lv.textarea(screen)\n        self.ta.add_event_cb(self._ta_event_cb, lv.EVENT.ALL, None)\n        self._kb = None\n\n    def _ta_event_cb(self, event):\n        code = event.get_code()\n\n        if code == lv.EVENT.CLICKED or code == lv.EVENT.FOCUSED:\n            if self._kb is None:\n                # create keyboard\n                self._kb = lv.keyboard(self._screen)\n                self._kb.set_size(self._screen.get_width(), int(self._screen.get_height()/2) )\n                self._kb.align_to(self.ta, lv.ALIGN.OUT_BOTTOM_MID, 0, 0)\n                self._kb.set_x(0)\n                self._kb.set_textarea(self.ta)\n                self._kb.add_event_cb(self._kb_event_cb, lv.EVENT.ALL, None)\n\n        elif code == lv.EVENT.DEFOCUSED:\n            if self._kb is not None:\n                self._kb.delete()\n                self._kb = None\n\n    def _kb_event_cb(self, event):\n        code = event.get_code()\n        if code == lv.EVENT.READY or code == lv.EVENT.CANCEL:\n            self.ta.send_event(lv.EVENT.DEFOCUSED, self.ta)\n\n\n\n\nclass ButtonLabel:\n    def __init__(self, screen, label, cb):\n        btn = lv.button(screen)\n        self.btn = btn\n        btn.set_height(30)\n        lbl = lv.label(btn)\n        lbl.set_text(label)\n        lbl.align(lv.ALIGN.CENTER, 0, 0)\n        btn.add_event_cb(self._bt_event_cb, lv.EVENT.CLICKED, None)\n        self.cb = cb\n\n    def _bt_event_cb(self, event):\n        # code = event.get_code()\n        self.cb()\n\n\n\nclass WifiScreen:\n    def __init__(self):\n        self._screen = lv.obj()\n        self._construct()\n\n    def load(self):\n        lv.screen_load(self._screen)\n\n    def _save_cb(self):\n        ssid = self.ss_ta.ta.get_text()\n        key = self.key_ta.ta.get_text()\n        print(f\"{ssid=}, {key=}\")\n        # TODO save\n\n    def _cancel_cb(self):\n        print(\"Cancel\")\n        #home_screen = fri3d.screens.home.HomeScreen()\n        #home_screen.load()\n\n    def _construct(self):\n        screen = self._screen\n\n        # title\n        title = lv.label(screen)\n        title.set_text(\"Wifi Configuration\")\n        title.align(lv.ALIGN.TOP_MID, 0, 0)\n\n        # ssid textarea\n        ss_ta = TextArea(screen)\n        self.ss_ta = ss_ta\n        ss_ta.ta.set_text(\"\")\n        ss_ta.ta.set_one_line(True)\n        ss_ta.ta.set_width(lv.pct(50))\n        ss_ta.ta.set_pos(100, 20)\n\n        # ssid label\n        ss_lbl = lv.label(screen)\n        ss_lbl.set_text(\"SSID:\")\n        ss_lbl.align_to(ss_ta.ta, lv.ALIGN.OUT_LEFT_MID, -5, 0)\n\n        # key textarea\n        key_ta = TextArea(screen)\n        self.key_ta = key_ta\n        key_ta.ta.set_text(\"\")\n        key_ta.ta.set_password_mode(True)\n        key_ta.ta.set_one_line(True)\n        key_ta.ta.set_width(lv.pct(50))\n        key_ta.ta.set_pos(100, 60)\n\n        # key label\n        key_lbl = lv.label(screen)\n        key_lbl.set_text(\"Key:\")\n        key_lbl.align_to(key_ta.ta, lv.ALIGN.OUT_LEFT_MID, -5, 0)\n\n        # save button\n        sv = ButtonLabel(screen, lv.SYMBOL.OK + \" Save\", self._save_cb)\n        sv.btn.align(lv.ALIGN.RIGHT_MID, -5, 0)\n\n        # cancel button\n        cancel = ButtonLabel(screen, lv.SYMBOL.CLOSE + \" Cancel\", self._cancel_cb)\n        cancel.btn.align(lv.ALIGN.LEFT_MID, 5, 0)\n\n\n\nw = WifiScreen()\nw.load()\n</code></pre>"},{"location":"en/micropython/lvgl/#canvas","title":"canvas","text":"<p>red border around a golden background <pre><code># Initialize\nimport display_driver\nimport lvgl as lv\ndisp = lv.display_get_default()\ndisp.set_resolution(296,240)\n\nscr = lv.screen_active()\n\nbuf = lv.draw_buf_create(scr.get_width(),scr.get_height(),lv.COLOR_FORMAT.RGB565, lv.STRIDE_AUTO)\ncanvas = lv.canvas(scr)\ncanvas.set_draw_buf(buf)\ncanvas.center()\n\nlayer = lv.layer_t()\ncanvas.init_layer(layer)\n\ndsc = lv.draw_rect_dsc_t()\ndsc.bg_color = lv.color_hex(0xffbf00)\ndsc.bg_opa = lv.OPA.COVER\n\ndsc.border_color = lv.palette_main(lv.PALETTE.RED)\ndsc.border_width = 2\ndsc.border_side = lv.BORDER_SIDE.TOP | lv.BORDER_SIDE.LEFT | lv.BORDER_SIDE.RIGHT | lv.BORDER_SIDE.BOTTOM\ndsc.border_opa = lv.OPA.COVER\n\ndsc.radius = 61\n\na = lv.area_t()\na.x1 = 0\na.y1 = 0\na.x2 = 295\na.y2 = 239\n\nlv.draw_rect(layer, dsc, a)\n\ncanvas.finish_layer(layer)\n</code></pre></p>"},{"location":"en/micropython/lvgl/#real-examples","title":"real examples","text":""},{"location":"en/micropython/lvgl/#load-png-image","title":"load png image","text":"<pre><code># load fri3d_logo-min.png\npng = open('fri3d_logo-min.png', 'rb')\ndata = png.read()\npng.close()\n\nimg = lv.image(lv.screen_active())\n\nimgd = lv.image_dsc_t()\nimgd.header.cf = lv.COLOR_FORMAT.ARGB8888\nimgd.header.w = 240\nimgd.header.h = 240\nimgd.data = data\nimgd.data_size = len(data)\n\nimg.set_src(imgd)\n\nimg.align(lv.ALIGN.CENTER, 0, 0)\n</code></pre>"},{"location":"en/noisycricket/#assembly-photos","title":"Assembly photos","text":"<ol> <li> <p>All components neatly packaged    </p> </li> <li> <p>Spread out in order of soldering    </p> </li> <li> <p>Component side of the pcb is where the fri3d logo is</p> <ul> <li>33 Ohm (blue body and orange,orange.black colored bands) resistor on top</li> <li>120 Ohm (beige body and black,red,black colored bands) risistor on bottom</li> </ul> <p>2 resistors soldered </p> </li> <li> <p>NPN transistor 2N3904 with flat side to the left (back of noisy cricket)    </p> </li> <li> <p>Electrolytic capacitor (33 microFarad)    Mind the polarity: long leg is positive, short leg is negative, white marking on the body is negative    There are 2 holes for positive and 2 holes for negative, choose best fitting ones.    </p> </li> <li> <p>Pin header soldered on the bottom    2 orientations are possible:</p> <ul> <li>on the bottom: this results in an upright position when mounted on the fri3d2024 badge</li> <li>at the back: this results in a front facing position when mounted on the fri3d2024 badge  </li> </ul> </li> <li> <p>Ready to solder the LED    Mind the polarity: long leg is positive, short leg is negative, flat side on the body is negative    </p> </li> <li> <p>LED soldered    Mind the polarity: positive (long leg) on the bottom, negative on top (short leg, flat side on the body)    </p> </li> <li> <p>Overview pictures of soldered Noisy Cricket     </p> </li> <li> <p>Noisy Cricket mounted on the fri3d2024 badge     Mounted with the pin header soldered on the bottom      </p> <p>Mounted with the pin header soldered on the back  </p> </li> </ol>"},{"location":"en/onboarding/firstupdate/","title":"Your first update","text":"<p>On the right-hand side, the lower switch turns on your badge</p> <p></p> <p>When you first power on your Fri3d badge, you can choose to update the firmware \"over the air\" (OTA) use the \"X\" and \"Y\" buttons to move between buttons on the screen</p> <p></p> <p>use the \"X\" or \"Y\" button to confirm that you want to go online. This only works on the Fri3d Camp network</p> <p></p> <p></p> <p>Select the newest version -- newer is always better, right? ;-)</p> <p></p> <p>There are different partitions. The badge will check each and update if necessary. This may take a while.</p> <p></p> <p>After the update, the badge will restart spontanuously</p> <p></p> <p>After the update, the option \"hardware test\" will no longer be available and the option \"MicroPython\" will have appeared</p> <p></p> <p>Your badge is now upgraded to the (current) latest firmware</p>"},{"location":"en/onboarding/","title":"Onboarding documentation","text":""},{"location":"en/onboarding/#badge","title":"Badge","text":"<p>Default software (\"Fri3d App\") can be controlled with the <code>X</code> (up) , <code>Y</code> (down), <code>A</code> (choose) &amp; <code>B</code> (back) buttons</p> <ul> <li>OTA Update: update your badge to latest release over Wi-Fi</li> <li>MicroPython: start MicroPython</li> <li>Hardware test: used to test all badges during production</li> <li>Retro-Go Gaming: an emulator for playing Nintendo Entertainment System (NES), Gameboy, Gameboy Color and Doom games on the badge</li> </ul>"},{"location":"en/onboarding/#flamingo","title":"Flamingo","text":"<p>AKA BFG9000 (Big Flamingo Gun)</p> <p></p> <p>You can use the flamingo, once fully assembled, direclty with your badge. No further configuration is required.</p>"},{"location":"en/onboarding/#mini-blaster","title":"Mini-blaster","text":"<p>AKA Noisy Cricket</p> <p></p> <p>This small SAO can be acquired from Team Badge for the cost of 1 consumption.</p>"},{"location":"en/onboarding/#communicator","title":"Communicator","text":"<p>If you plug in the USB connector of the LANA module, you can use the Communicator as an USB keyboard. When connected to the badge, you can use the following features :</p> <ul> <li>backlit QWERTY Keyboard designed by Solder Party available on UART</li> <li>TDK ICS43434 microphone</li> <li>Analog Devices MAX98357A DAC with amplifier and small speaker</li> </ul> <p>The key combinations to control the nbacklight and other special combinations can be found on the Communicator page.</p>"},{"location":"en/platformio/#visual-studio-code","title":"Visual Studio Code","text":"<p>You can download VS Code from https://code.visualstudio.com/. Don't worry about what other extensions you need, you can easily install them whenever you need them.</p>"},{"location":"en/platformio/#platformio-extension","title":"PlatformIO extension","text":"<ol> <li>Inside Visual Studio Code, go to the extensions tab. (CTRL+SHIFT+X)</li> <li>In the search bar, type \"platformio\"</li> <li>Install the one with the orange alien icon</li> </ol>"},{"location":"en/platformio/#hello-world","title":"Hello World","text":"<ol> <li>go to PlatformIO window (click on the alien face in the left column)</li> <li>Choose \"New Project\"</li> <li>Alternatively, if you see the \"PIO Home\" window, you can click \"+ new project\" there.</li> <li>For board, choose <code>esp32-s3-devkitc-1</code>. PlatformIO will start downloading necessary libraries</li> <li>Open platformio.ini - you should see the following:</li> </ol> <pre><code>    [env:esp32-s3-devkitc-1]\n    platform = espressif32\n    board = esp32-s3-devkitc-1\n    framework = arduino\n</code></pre> <ol> <li>add the following lines at the bottom:</li> </ol> <pre><code>    board_build.arduino.memory_type = qio_opi\n    board_build.partitions = default_16MB.csv\n    board_upload.flash_size = 16MB\n    monitor_speed = 115200\n    lib_deps = bodmer/TFT_eSPI@^2.5.33\n    build_flags =\n        -DBOARD_HAS_PSRAM # N16R8V has PSRAM\n        -DARDUINO_USB_MODE=1 # necessary for serial port\n        -DARDUINO_USB_CDC_ON_BOOT=1 # necessary for serial port\n</code></pre>"},{"location":"en/platformio/#examples-in-github","title":"Examples in GitHub","text":"<p>https://github.com/Fri3dCamp/badge_2024_arduino/tree/main/examples/platformio%20basic%20examples</p> <p>If you just want to try all examples:</p> <ol> <li>In GitHub, goto https://github.com/Fri3dCamp/badge_2024_arduino</li> <li>Click \"Fork\"</li> <li>You now have the same repository, but in your own profile</li> <li>Click the green button <code>&lt;&gt; Code</code></li> <li>copy the URL you see in the pop-up</li> <li>Open the Git Bash CLI where you want to create the forked repository</li> <li>Type <code>git clone</code> and paste the URL from the Github repository</li> </ol>"},{"location":"en/platformio/#your-own-code-on-github","title":"Your own code on GitHub","text":"<ol> <li>Download GIT from https://git-scm.com/downloads</li> <li>Create an account on https://github.com</li> <li>At the top of the screen, click \"+\", click \"New repository\"</li> <li>Follow the GitHub instructions to clone your repository to your local hard drive</li> <li>Code away!</li> <li>Open the Git Bash CLI in the root folder of your repository</li> <li><code>git add .</code></li> <li><code>git commit -m \"cool new program\"</code></li> <li><code>git push</code></li> <li>Check that your code has arrived on GitHub</li> </ol>"},{"location":"en/platformio/#your-code-in-the-fri3d-camp-repository","title":"Your code in the Fri3d Camp repository","text":"<ol> <li>In GitHub, goto https://github.com/Fri3dCamp/badge_2024_arduino</li> <li>Click \"Fork\"</li> <li>You now have the same repository, but in your own profile</li> <li>Click the green button <code>&lt;&gt; Code</code></li> <li>Copy the URL you see in the pop-up</li> <li>Open the Git Bash CLI where you want to create the forked repository</li> <li>Type <code>git clone</code> and paste the URL from the Github repository</li> </ol> <p>So far, the instructions are exactly the same as for downloading the examples</p> <ol> <li>In github click on <code>main</code> to create a new branch</li> <li>In the search bar, type a name of your choice, e.g. <code>newexample</code></li> <li>Click <code>create branch newexample</code> from main</li> <li>Open the Git Bash CLI in the root folder of your repository</li> <li><code>git checkout -b newexample</code></li> <li>Add your example</li> <li><code>git add .</code></li> <li><code>git commit -m \"I created a new example\"</code></li> <li><code>git push</code></li> <li>in GitHub, click <code>compare and pull request</code></li> <li>Add a nice description,</li> <li>Click <code>Create pull request</code></li> </ol>"},{"location":"en/sweet4x4/#features","title":"Features","text":"<p>The sweet 4x4 macropad is at its 3rd iteration. This tiume you'll use a LANA TNY (or any other XIAO / QtPy compatible board) at the heart of this macropad. You can opt for 16 keys or 15 keys and a rotary encoder.</p> <p></p>"},{"location":"en/sweet4x4/#step-by-step-assembly-guide","title":"Step by step assembly guide","text":""},{"location":"en/sweet4x4/#overview","title":"Overview","text":"<p>The package you received has everything you need to build your own Sweet 4x4.</p> <ul> <li>15 sockets</li> <li>15 switches</li> <li>16 diodes</li> <li>6 WAS2812 LEDs</li> <li>2 capacitors</li> <li>1 LANA TNY</li> <li>1 pink PCB</li> <li>Screws and standoffs <code>HOW MANY?</code></li> </ul> <p></p>"},{"location":"en/sweet4x4/#sockets","title":"Sockets","text":"<p>Let's start off with the lowest components. In this case the key sockets. Place the sockets in the holes and solder the 2 SMD pads on the sides. Do this 15 times unless you do not want an encoders, then you can opt for 16 sockets and keys. (For those not wanting sockets, you can also solder your keys directly on the PCB)</p> <p></p>"},{"location":"en/sweet4x4/#diodes","title":"Diodes","text":"<p>The 16 diodes should be bent to properly fit in the PCB. Therefor the 2 bottom corners are designed as dedicated to bending these parts. Once all the diodes are bent, you can start soldering them in the 2 circles next. The black line on the diode (the cathode) should be facing outward.</p> <p> </p>"},{"location":"en/sweet4x4/#lana-tny","title":"LANA TNY","text":"<p>You can solder theLANA TNY module using the supplied through hole pins OR you can SMD mount it for the lowest profile solution. When opting for the surface mount solution, you can use some of the pins to properly align the module before soldering as shown below.</p> <p></p>"},{"location":"en/sweet4x4/#ws2812-leds","title":"WS2812 LEDs","text":"<p>Solder 6 WS2812 RGB LEDs on the bottom as indicated in the pictures below. Don't press the LEDs down too far to prevent damage to the LED. Also prevent shorting the LED pins with the SMD sockets pins by not bending it all the way to the board as shown in the pictures below.</p> <p> </p>"},{"location":"en/sweet4x4/#capacitors","title":"Capacitors","text":"<p>In order to reduce the total height of the keyboard, you should bend the capacitor before soldering it.</p> <p></p>"},{"location":"en/sweet4x4/#encoder","title":"Encoder","text":"<p>If you like a rotary encoder, place one in the upper left corner of the key matrix and sodler the 7 pins (5 smaller and 2 bigger ones). The larger pins, used for mechanical strength, might require a lot of solder to fille the holes.</p> <p></p>"},{"location":"en/sweet4x4/#switches","title":"Switches","text":"<p><code>INSERT IMAGE WITH THE PLEXI PLATE</code></p>"},{"location":"en/sweet4x4/#casing","title":"Casing","text":"<p>Screws? Spacers? Plexi?</p>"},{"location":"en/sweet4x4/#keycaps","title":"Keycaps","text":"<p>Snap on the keycaps of your choice.</p> <p></p>"},{"location":"en/sweet4x4/#n-key-rollover","title":"N-key rollover","text":"<p>A keyboard with n-key rollover, or abbreviated as NKRO, has the ability to scan each button press individually, as opposed to having the PC do it. As a result, every pressed button, or key, is noted, even if you\u2019re pressing a bunch of keys simultaneously.</p> <p>Sometimes you'll see the \"n\" in n-key rollover replaced with a number. That number tells you how many keys you can press simultaneously with the keyboard being aware. For example, if your keyboard has 6-key rollover, you can press six keys at once with successful input. N-key rollover is particularly relevant/helpful for gaming keyboards.</p> <p>Not all keyboards come with n-key rollover, as implementing the feature comes with certain cost and design challenges.</p> <p>To enable n-key rollover on this macropad, break off the 2 top corners to break the short circuit and use the diodes.</p>"},{"location":"en/sweet4x4/#firmware","title":"Firmware","text":"<p><code>INSERT INFO</code></p>"},{"location":"","title":"Fri3d Camp 2024 Badge en Addons","text":"<p>Update je Badge!</p> <p>Zoek je info voor een van deze borden? Klik dan onmiddellijk door naar die pagina.</p>"},{"location":"#spelen","title":"Spelen!","text":"<p>Je moet geen programmeer-goochelaar te zijn om leuke dingen te doen! Op de Onboarding pagina zie je de dingen die standaard al ingebouwd zijn. Je kan ook doorklikken naar de gaming pagina</p> <p></p>"},{"location":"#programmeren","title":"Programmeren","text":"<p>Je kan jouw badge op verschillende manieren programmeren:</p> <ul> <li>Je kan C++ in de Arduino editor, of Visual Studio Code</li> <li>Wie liever Python programmeert, kan gelijk welke tekst editor gebruiken, maar Visual Studio Code geeft je wel wat extras.</li> <li>Om je badge te laten babbelen met je smart home is er esphome. Je kan de command line gebruiken of het esphome dashboard.</li> <li>Als je liever niet typt, kan je blokjes slepen met bipes, een beetje zoals Scratch</li> </ul>"},{"location":"#reset-standaard-firmware","title":"Reset Standaard Firmware","text":"<p>Start je badge niet meer op of wil je terug naar de originele software gaan. Wandel dan even naar de badge / soldeer tent waar je het badge repair station zal vinden. Op deze PC kan je stapsgewijze instructies volgen om alle borden terug te flashen. Of zie hier hoe je ze zelf kan resetten</p>"},{"location":"#documentatie","title":"Documentatie","text":"<ul> <li>Introductie</li> <li>De hardware</li> <li>C++ voorbeelden</li> <li>Voorge\u00efnstalleerde Firmware</li> </ul>"},{"location":"reset/","title":"Flashing","text":"<p>Als je programmeer-avonturen bizarre resultaten hebben opgeleverd, kan het zijn dat je wil teruggaan naar de originele software...</p>"},{"location":"reset/#fri3d-camp-reset-booth","title":"Fri3d Camp Reset Booth","text":"<p>Tijdens Fri3d Camp, bij de \"Badge EHBO\" helpen we jou met plezier terug op weg! Zoek naar de \"badge reset firmware\" booth op het kamp. We hebben alles voorzien :-)</p>"},{"location":"reset/#web-interface","title":"Web interface","text":"<p>De online flasher app werkt enkel met browsers gebaseerd op chrome(Chrome of Edge, niet Firefox of Safari).</p> <ol> <li>download de meest recente <code>full_webflasher_*.zip</code> van https://github.com/Fri3dCamp/badge_firmware/releases</li> <li>ga naar https://fri3d-flasher.vercel.app/</li> <li>klik op het icoon om de zip file te uploaden die je zonet hebt gedownload</li> <li>klik op de \"begin te flashen\" knop</li> </ol> <p>Als het flashen mislukt omdat je badge elke zoveel seconden reset, kan je ze als volgt \"forceren\" om te luisteren naar een nieuwe upload:</p> <ol> <li>Klik en houd de \"start\" knop in(Op ESP32 heet dit de \"boot button\")</li> <li>Klik en laat de \"reset\" knop los</li> <li>Je badge staat nu in \"download\" mode tot je opnieuw reset duwt</li> </ol> <p>Je badge start nu in de default Fri3d App.</p>"},{"location":"reset/#esp-idf","title":"ESP-IDF","text":"<p>Dit is de ingewikkelde versie en is het enkel waard als de web flasher niet werkt.</p> <ol> <li>Als je badge om de paar seconden spontaan reset, kan je ze als volgt \"forceren\" om te luisteren naar een nieuwe upload:<ol> <li>Klik en houd de \"start\" knop in (Op ESP32 heet dit de \"boot button\")</li> <li>Klik en laat de \"reset\" knop los</li> <li>Je badge staat nu in \"download\" mode tot je opnieuw reset duwt</li> </ol> </li> <li>installeer ESP-IDF https://docs.espressif.com/projects/esp-idf/en/stable/esp32/get-started/index.html#installation</li> <li>Download de meest recente firmware op https://github.com/Fri3dCamp/badge_2024_micropython</li> <li>in de command line interface, type:<pre><code>python -m esptool -p (PORT) -b 460800 --before default_reset --after no_reset --chip esp32s3 write_flash --flash_mode dio --flash_size 16MB --flash_freq 80m 0x0 bootloader.bin 0x8000 partition-table.bin 0x1d000 ota_data_initial.bin 0x30000 micropython.bin\n</code></pre> </li> </ol>"},{"location":"Retro--Go-Gaming/","title":"Retro-Go Gaming","text":"<p>Retro-Go is een programma om oude (maar goeie!) spelletjes op ESP32-gebaseerde toestellen te spelen, zoals de Fri3d Camp 2024 Badge. Het project bestaat uit een \"lanceerder\" en een selectie van de beste applicaties en emulators, serieus geoptimaliseerd om minder CPU, geheugen en opslag nodig te hebben, zonder minder compatibel te zijn!</p>"},{"location":"Retro--Go-Gaming/#bediening","title":"Bediening","text":""},{"location":"Retro--Go-Gaming/#algemene-knoppen","title":"Algemene knoppen","text":"<ul> <li><code>RESET</code>: herstart de huidige app</li> <li><code>START+MENU</code> samen: Ga uit Retro-Go, terug naar de Fri3d App</li> </ul>"},{"location":"Retro--Go-Gaming/#knoppen-in-de-lanceerder","title":"Knoppen in de lanceerder","text":"<ul> <li><code>Menu</code>: Vorige scherm</li> <li><code>Start</code>: Volgende scherm</li> <li><code>X</code>: \"Opties\" menu:<ul> <li>Volume van het geluid</li> <li>Audio out: \"Buzzer\" die op de badge zit (stil en lage kwaliteit) of \"Ext(ernal) DAC\" voor de Communicator of andere externe luidsprekers</li> <li>Wi-Fi opties:<ul> <li>Wi-Fi Access Point: activeer deze, verbind met de hotspot en surf naar http://192.168.4.1/ om de bestanden op de badge te beheren</li> </ul> </li> </ul> </li> <li><code>Y</code>: Menu met \"Find games\" om te zoeken op de badge van je vrienden naar spelletjes die jij nog niet hebt</li> <li><code>A</code>: Actie</li> <li><code>B</code>: Terug</li> <li>Boven/Onder: menuinstelling selecteren</li> <li>Links/Rechts: menuinstelling aanpassen</li> </ul>"},{"location":"Retro--Go-Gaming/#knoppen-in-nes-en-gameboy-color-spelletjes","title":"Knoppen in NES en Gameboy (Color) spelletjes","text":"<ul> <li><code>Start</code>: Start</li> <li><code>Menu</code>: Select (bijna nooit nodig)</li> <li><code>A</code> en <code>B</code>: spelknoppen</li> </ul>"},{"location":"Retro--Go-Gaming/#knoppen-in-doom","title":"Knoppen in Doom","text":"<ul> <li><code>Menu</code>: Wissel van wapen</li> <li><code>Start</code>: Gebruik (deur, knop, schakelaar)</li> <li><code>X</code>: Opties menu</li> <li><code>Y</code>: Spel Menu</li> <li><code>A</code>: Schieten (of slaan)</li> <li><code>B</code>: Snel of zijwaarts lopen</li> </ul>"},{"location":"Retro--Go-Gaming/#sd-kaartje-of-intern-opslaggeheugen","title":"SD Kaartje of intern opslaggeheugen","text":"<p>De badge zal proberen de micro SD kaart (geformatteerd als FAT) te gebruiken en als dat niet lukt, het interne opslaggeheugen.</p> <p>Als je een nieuwe micro SD kaart insteekt, is het aangeraden om dit eerst te vullen met de laaste nieuwe <code>default_files_config_and_games.zip</code> van de releases pagina zodat je alle juiste standaard instellingen hebt, zoals de wifi netwerken.</p>"},{"location":"Retro--Go-Gaming/#spelletjes-zoeken","title":"Spelletjes zoeken","text":"<p>Als je graag wil zoeken naar spelletjes die je nog niet hebt op de badge van een vriend, dan kan dat rechtstreeks, zonder dat je een laptop of SD kaartlezer nodig hebt!</p> <p>Het werkt in 3 stappen:</p> <p>1) je vriend zet zijn hotspot aan (X knop -&gt; \"Wi-Fi options\" -&gt; \"Wi-Fi Access Point\" en kies er eentje, bijvoorbeeld \"retro-go-channel-3\")</p> <p> </p> <p>2) jij verbindt met zijn hotspot (X knop -&gt; \"Wi-Fi options\" -&gt; \"Wi-Fi select\" -&gt; \"retro-go-channel-3\" die je vriend koos)</p> <p> </p> <p>3) jij zoekt naar spelletjes (Y knop -&gt; \"Find games\" -&gt; kies een map)</p> <p> </p> <p>Dit kan even duren, maar als je het beu bent kan je het altijd stoppen door je badge te herstarten. Mocht er een fout optreden, probeer dan eens opnieuw - hij slaat spelletjes over die je al hebt.</p> <p>Tip: Zet de beste paar spelletjes in een mapje <code>/roms/nes/best</code>, <code>/roms/gb/best</code> of <code>/roms/gbc/best</code> en zet je zelfgemaakte spelletjes in <code>/roms/gbc/gbstu</code> zodat je die gemakkelijk kan terugvinden.</p>"},{"location":"Retro--Go-Gaming/#zelf-spelletjes-maken","title":"Zelf spelletjes maken","text":"<p>Met GBStudio kan je zelf eenvoudig verschillende soorten spelletjes maken voor GameBoy Color. Als je op YouTube zoekt naar 'GBStudio' vind je een hele goeie playlist van filmpjes die je snel alles leren wat je moet weten.</p>"},{"location":"Retro--Go-Gaming/#over-retro-go","title":"Over Retro-Go","text":"<p>Retro-go heeft zelf ondersteuning voor de Fri3d Camp 2024 Badge maar de afgeleide versie retro-go-fri3d bevat een pak meer toeters en bellen die te specifiek zijn voor Fri3d Camp om in de algemene versie te kunnen.</p>"},{"location":"Retro--Go-Gaming/#ondersteunde-systemen","title":"Ondersteunde systemen:","text":"<ul> <li>Nintendo Entertainment System (NES)</li> <li>Gameboy</li> <li>Gameboy Color</li> <li>DOOM (ook mods!)</li> </ul> <p>Er zijn nog andere systemen ondersteund maar deze zijn niet geactiveerd op de Fri3D Camp 2024 Badge omdat ze minder populair zijn of omdat ze wat te traag werkten.</p>"},{"location":"Retro--Go-Gaming/#eigenschappen","title":"Eigenschappen:","text":"<ul> <li>Menu in de spelletjes</li> <li>Favorieten en recent gespeelde spellen</li> <li>GameBoy kleurenpaletten, klok aanpassen en bewaren</li> <li>NES kleurenpaletten, PAL ROMs, NSF ondersteuning</li> <li>Opties om het scherm te schalen en te filteren</li> <li>Goeie performantie en compatibiliteit</li> <li>Turbo Snelheid/Doorspoelen</li> <li>Hoesjes en voorbeeldweergave van bewaarde spelstatus</li> <li>Meerdere spelstatussen bewaren per spel</li> <li>Bestanden beheren via draadloos netwerk</li> <li>Vriend-naar-vriend spelletjes ROMs delen</li> <li>Aansturing van piezoelektrische zoemer als primitieve luidspreker</li> <li>Ondersteuning voor Fri3d Camp 2024 \"Communicator\" en andere externe luidsprekers</li> </ul>"},{"location":"Retro--Go-Gaming/#schermafdrukken","title":"Schermafdrukken","text":""},{"location":"arduino/","title":"Arduino IDE installatie","text":"<p>Download de Arduino IDE van hun website Om de Fri3d badge te gebruiken in de Arduino IDE moet je versie <code>2.0.17</code> van de ESP32 board package installeren. Hieronder de instructies.</p>"},{"location":"arduino/#general-arduino-ide-setup-voor-esp32","title":"General Arduino IDE Setup voor ESP32","text":"<ul> <li>In de Arduino IDE klik je op het <code>Tools</code> menu, selecteer <code>Boards</code> vervolgens <code>Boards Manager</code>. Installeer  versie 2.0.17 van het ESP32 packet.</li> <li>de reden dat we versie <code>2.0.17</code> adviseren is omdat versie <code>3.0.2</code> compilatie fouten geeft voor de ESP32S3 module.</li> <li>In het <code>Tools</code> menu, selecteer <code>Board</code> -&gt; <code>esp32</code> -&gt; <code>ESP32S3 Dev Module</code></li> </ul>"},{"location":"arduino/#hoe-uploaden-in-arduino-ide","title":"Hoe uploaden in Arduino IDE","text":"<ul> <li>Zet je badge aan</li> <li>Connecteer de badge via USB aan je computer</li> <li>In het <code>Tools</code> menu selecteer je <code>Port</code> en kies je uit de lijst degene die het meest lijkt op de badge.</li> <li>Klik op de Upload knop (rechts wijzende groene pijl)</li> </ul>"},{"location":"communicator/","title":"Communicator add-on","text":"<p>Om je communicator te doen werken, moet je door twee fases: - Hardware: assembleer de hardware (solderen). - Software: flash de firmware (embedded software) naar de LANA module op je communicator.</p> <p>De hardware assemblage proces is uitgelegd op deze pagina. Voor de software verwijzen we naar deze pagina.</p> <p> </p>"},{"location":"communicator/#hardware","title":"HARDWARE","text":""},{"location":"communicator/#communicator-eigenschappen","title":"Communicator eigenschappen","text":"<p>De communicator bestaat uit:</p> <ul> <li>QWERTY toetsenbord met achtergrond verlichting ontworpen door Solder Party</li> <li>op RISC-V gebaseerd microcontroller module LANA TNY</li> <li>TDK ICS43434 microfoon</li> <li>Analog Devices MAX98357A DAC met versterker</li> <li>kleine luidspreker</li> </ul> <p>Je kan het toetsenbord ook als USB toetsenbord gebruiken, echter sluit de USB kabel niet aan wanneer het bord aan de badge hangt!</p> <p>De ontwerp- en bronbestanden kan je terugvinden in de GitHub repository</p> <p></p>"},{"location":"communicator/#stap-voor-stap-assemblage-handleiding","title":"Stap voor stap assemblage handleiding","text":""},{"location":"communicator/#alle-componenten-netjes-verpakt","title":"Alle componenten netjes verpakt","text":"<p>Het pakje dat je ontvangen hebt bevat alles wat je nodig hebt om de communicator add-on te bouwen</p> <ul> <li>Communicator printplaat</li> <li>Roze afdekplaat</li> <li>4 x 16mm lange plastieken pin</li> <li>4 x 2mm lange plastieken pin</li> <li>luidspreker</li> <li>siliconen toetsenbord</li> <li>2 x 6 pin extra lange pinnen</li> </ul> <p></p>"},{"location":"communicator/#monteer-de-luidspreker","title":"Monteer de luidspreker","text":"<p>Verwijder de plastieken laag om de luidspreker op de printplaat te kleven. Soldeer de 2 draden op de printplaat zoals op de foto hieronder. De rode draad moet naar het soldeervlak gaan dat gemarkeerd is met een <code>+</code></p> <p> </p>"},{"location":"communicator/#soldeer-de-lange-pinnen","title":"Soldeer de lange pinnen","text":"<p>Plaats de lange pinnen aan de zijde met alle componenten. Je kan een andere vrouwelijke connector (of zelfs de badge) gebruiken om de 2 losse pinnen stroken netjes op een rijtje te houden tijdens het solderen.</p> <p></p>"},{"location":"communicator/#monteer-het-toetsenbord","title":"Monteer het toetsenbord","text":"<p>Duw de 2mm lange plastieken pinnetjes in de roze cover zoals getoond op de foto's hieronder. Leg het siliconen toetsenbord er in en klik het geheel op de communicator printplaat.</p> <p> </p>"},{"location":"communicator/#verbind-de-communicator-met-de-badge","title":"Verbind de communicator met de badge","text":"<p>Duw de 16mm lange plastieken pinnetjes in de 4 gaten die overeenkomen met de badge. Verwijder de beschermende achterplaat en duw de communicator op zijn plaats.</p> <p> </p>"},{"location":"communicator/#gebruik","title":"Gebruik","text":"<p>Het toetsenbord doet zich voor als een HID input toestel. Met de <code>Fn</code> toets kan je speciale functies activeren:</p> <ul> <li><code>Fn+Rood Vierkant</code>: Maak de LED op LANA rood</li> <li><code>Fn+Oranje Driehoek</code>: Maak de LED op LANA oranje</li> <li><code>Fn+Geel Fri3d logo</code>: Maak de LED op LANA geel</li> <li><code>Fn+Groene Cirkel</code>: Maak de LED op LANA groen</li> <li><code>Fn+Blauwe Klaverblad</code>: Maak de LED op LANA blauw</li> <li><code>Fn+Paarse Ruit</code>: Maak de LED op LANA paars</li> <li><code>Fn+Solder Party</code>: Zet de LED op LANA uit</li> <li><code>Fn+Backspace</code>: Delete</li> <li><code>Fn+Omhoog</code>: Page Up</li> <li><code>Fn+Omlaag</code>: Page Down</li> <li><code>Fn+Links</code>: Home</li> <li><code>Fn+Rechts</code>: End</li> <li><code>Fn+Spatiebalk</code>: schakel de achtergrond verlichting aan/uit</li> <li><code>Fn+Rechtse Shift</code>: Schakel Caps Lock</li> </ul>"},{"location":"communicator/#firmware-functies","title":"Firmware functies","text":"<p>De firmware stuurt HID pakketten (8 bytes) uit op USB, I2C (adres <code>0x38</code>) en UART.</p> <p>De eerste byte geeft aan welke modificatietoetsen zijn ingedrukt:</p> Bit Modifier Key 0 LINKSE CTRL 1 LINKSE SHIFT 2 LINKSE ALT 3 LINKSE GUI 4 RECHTSE CTRL 5 RECHTSE SHIFT 6 RECHTSE ALT 7 RECHTSE GUI <p>De tweede byte is gereserveerd, de overige 6 bytes kunnen een HID-sleutelcode bevatten.</p> <p> </p>"},{"location":"communicator/#software-firmware","title":"SOFTWARE (FIRMWARE)","text":"<p>Normaal zou de firmware al op je LANA module geflashed moeten zijn. Echter, als het niet zou werken: je kan de firmware flashen aan de <code>badge flash station</code> in de soldeer area.</p> <p>Als je wil, kan je de firmware ook zelf flashen met je eigen laptop. Bijvoorbeeld mocht je de firmware willen updaten of zelf aanpassingen willen maken. De instructies vind je op deze pagina.</p>"},{"location":"communicator/programming/","title":"De LANA Module Programmeren","text":"<p>Om de LANA module op je <code>communicator</code> te programmeren, kun je zowel Embeetle IDE als Mounriver Studio gebruiken.</p> <p> </p>"},{"location":"communicator/programming/#embeetle-ide","title":"Embeetle IDE","text":"<p>Embeetle is een IDE van Belgische makelij. De LANA kan worden geprogrammeerd via USB-C-aansluiting, maar ook met de WCH-Link debugger, wat extra debug-mogelijkheden biedt. Klik hier voor de volledige documentatie over hoe je de LANA module in Embeetle kunt programmeren. De onderstaande stappen zijn een quick start guide om je LANA module via de USB-C-poort te programmeren.</p> <p> </p>"},{"location":"communicator/programming/#stap-1-download-embeetle-ide","title":"STAP 1: Download Embeetle IDE","text":"<p>Download eerst Embeetle:  - https://embeetle.com/downloads</p> <p>Je kunt het downloaden voor zowel Windows als Linux. We hebben nog geen ondersteuning voor MAC.</p> <p></p> <p> </p>"},{"location":"communicator/programming/#stap-2-start-het-lana-tny-01-communicator-2024-project","title":"STAP 2: Start het <code>lana-tny-01-communicator-2024</code> project","text":"<p>Start Embeetle en klik op 'CREATE PROJECT':</p> <p></p> <p>  Selecteer vervolgens <code>WCH</code> als chip fabrikant en zoek naar het project <code>lana-tny-01-communicator-2024</code>:</p> <p></p> <p>  Klik onderaan op <code>CREATE</code>. Embeetle IDE zal het project en ook alle benodigde tools automatisch downloaden. Dan opent het project:</p> <p></p> <p> </p>"},{"location":"communicator/programming/#stap-3-plug-het-bordje-in","title":"STAP 3: Plug het bordje in","text":"<p>DRUK EERST op de <code>BOOT</code>-knop en SLUIT DAN je bordje aan op de computer met een USB-C-kabel (terwijl je de <code>BOOT</code>-knop ingedrukt houdt):</p> <p></p> <p>Wanneer het bordje is aangesloten, kun je de <code>BOOT</code>-knop loslaten. Deze procedure zorgt ervoor dat je bordje in \"bootloader-modus\" komt. Dit betekent dat de microcontroller klaar is om nieuwe firmware te ontvangen!</p> <p> </p>"},{"location":"communicator/programming/#stap-4-flash-de-firmware","title":"STAP 4: Flash de firmware","text":"<p>Klik nu op de <code>flash</code>-knop bovenaan in Embeetle IDE. Embeetle zal proberen de firmware naar de LANA module te flashen. Echter, je kunt nu de volgende foutmelding krijgen: <pre><code>Failed to open USB device: Bus 001 Device 008: ID 4348:55e0\nError: Failed to open USB device on Windows\n</code></pre> Op Linux kun je een ander probleem tegenkomen: <pre><code>Failed to open USB device: Bus 003 Device 010: ID 4348:55e0\nError: Failed to open USB device on Linux due to no enough permission\n</code></pre> Hieronder is de oplossing.</p> <p> </p>"},{"location":"communicator/programming/#stap-5a-installeer-zadig-alleen-windows","title":"STAP 5a: Installeer Zadig (alleen Windows)","text":"<p>Je moet Zadig installeren en de driver voor het USB-apparaat vervangen door de WinUSB-driver. Download eerst Zadig: </p> <p></p> <p>  Open vervolgens Zadig en selecteer Options -&gt; List All Devices:</p> <p></p> <p>  Selecteer USB Module uit de list of devices en kies WinUSB als driver. Klik vervolgens op Replace Driver:</p> <p></p> <p>  Wacht tot de driver-installatie is voltooid:</p> <p></p> <p>  Succes:</p> <p></p> <p>  Probeer het opnieuw in Embeetle IDE. Het zou nu moeten werken:</p> <pre><code>\"C:/Users/krist/EMBEETLE IDE/embeetle/beetle_tools/windows/wchisp_0.2.2_64b/wchisp.exe\" flash application.elf\n14:57:06 [INFO] Chip: CH32V203G6U6[0x3619] (Code Flash: 32KiB)\n14:57:06 [INFO] Chip UID: CD-AB-19-97-D0-BC-B6-FF\n14:57:06 [INFO] BTVER(bootloader ver): 02.70\n14:57:06 [INFO] Code Flash protected: false\n14:57:06 [INFO] Current config registers: a55aff0000ff00ffffffffff00020700cdab1997d0bcb6ff\nRDPR_USER: 0x00FF5AA5\n  [7:0]   RDPR 0xA5 (0b10100101)\n    `- Unprotected\n  [16:16] IWDG_SW 0x1 (0b1)\n    `- IWDG enabled by the software, and disabled by hardware\n  [17:17] STOP_RST 0x1 (0b1)\n    `- Disable\n  [18:18] STANDBY_RST 0x1 (0b1)\n    `- Disable, entering standby-mode without RST\n  [23:22] SRAM_CODE_MODE 0x3 (0b11)\n    `- CODE-228KB + RAM-32KB / CODE-160KB + RAM-32KB depending on the chip\nDATA: 0xFF00FF00\n  [7:0]   DATA0 0x0 (0b0)\n  [23:16] DATA1 0x0 (0b0)\nWRP: 0xFFFFFFFF\n  `- Unprotected\n14:57:06 [INFO] Read application.elf as ELF format\n14:57:06 [INFO] Found loadable segment, physical address: 0x00000000, virtual address: 0x00000000, flags: 0x5\n14:57:06 [INFO] Section names: [\".init\", \".vector\", \".text\"]\n14:57:06 [INFO] Found loadable segment, physical address: 0x00000dbc, virtual address: 0x20000000, flags: 0x6\n14:57:06 [INFO] Section names: [\".data\"]\n14:57:06 [INFO] Firmware size: 4096\n14:57:06 [INFO] Erasing...\n14:57:06 [WARN] erase_code: set min number of erased sectors to 8\n14:57:06 [INFO] Erased 8 code flash sectors\n14:57:07 [INFO] Erase done\n14:57:07 [INFO] Writing to code flash...\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 4096/409614:57:07 [INFO] Code flash 4096 bytes written\n14:57:08 [INFO] Verifying...\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 4096/409614:57:08 [INFO] Verify OK\n14:57:08 [INFO] Now reset device and skip any communication errors\n14:57:08 [INFO] Device reset\n</code></pre> <p>Als het niet werkte, trek dan de LANA-module eruit en sluit hem opnieuw aan op je computer terwijl je de <code>BOOT</code>-knop ingedrukt houdt (laat de knop een paar seconden na het aansluiten op de computer los), om ervoor te zorgen dat het echt in \"bootloader-modus\" is. Als het nog steeds niet werkt, aarzel dan niet om contact met ons op te nemen:  - E-mail: kristof@embeetle.com  - Whatsapp: +32(0) 496 90 75 44  - Discord: @kristof-at-embeetle</p> <p> </p>"},{"location":"communicator/programming/#stap-5b-voeg-apparaat-toe-aan-plugdev-groep-alleen-linux","title":"STAP 5b: Voeg apparaat toe aan plugdev groep (alleen Linux)","text":"<p>Op Linux moet je het apparaat toevoegen aan de plugdev groep. Controleer eerst de groepen die gekoppeld zijn aan de huidige gebruiker: <pre><code>$ groups whoami\nkristof : kristof adm cdrom sudo dip plugdev lpadmin lxd sambashare\n</code></pre> Als <code>plugdev</code> niet is vermeld, voeg dan de huidige gebruiker toe aan die groep:  <pre><code>$ sudo useradd -G plugdev whoami\n</code></pre> Bepaal de Vendor ID en Product ID van je apparaat met het <code>$ lsusb</code> commando:  <pre><code>$ lsusb\nBus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\nBus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub\nBus 003 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\nBus 003 Device 002: ID 046d:c548 Logitech, Inc. Logi Bolt Receiver\nBus 003 Device 003: ID 1a40:0101 Terminus Technology Inc. Hub\nBus 003 Device 004: ID 04f2:b75c Chicony Electronics Co., Ltd FHD Webcam\nBus 003 Device 005: ID 1a2c:4324 China Resource Semico Co., Ltd USB Keyboard\nBus 003 Device 006: ID 048d:6005 Integrated Technology Express, Inc. ITE Device(8291)\nBus 003 Device 007: ID 1bcf:2701 Sunplus Innovation Technology Inc. HD 720P webcam\nBus 003 Device 008: ID 048d:ce00 Integrated Technology Express, Inc. ITE Device(8291)\nBus 003 Device 009: ID 8087:0026 Intel Corp. AX201 Bluetooth\nBus 003 Device 011: ID 4348:55e0 WinChipHead\nBus 004 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub\nBus 004 Device 002: ID 0bda:0316 Realtek Semiconductor Corp. Card Reader\n</code></pre> Zoek naar de lijn met <code>WinChipHead</code> (derde van onder). Zoals je kunt zien, bestaat de ID voor mijn apparaat uit twee 4-cijferige hex-getallen: <code>ID 4348:55e0</code>. De eerste is de Vendor ID, de tweede de Product ID. Verwissel ze niet!</p> <p>Navigeer in de console naar <code>/etc/udev/rules.d</code> en lijst de inhoud van de directory: <pre><code>$ cd /etc/udev/rules.d\n$ ls\n70-snap.core.rules\n70-snap.firefox.rules\n70-snap.snap-store.rules\n</code></pre> Maak een nieuw bestand aan, bijvoorbeeld met de gedit-editor:  <pre><code>$ sudo gedit 10-probe.rules\n</code></pre> Je kunt dit bestand een willekeurige naam geven, zolang het maar eindigt op <code>.rules</code>. Rules files beginnen bij conventie met een nummer. Linux behandelt rules files in lexicale volgorde, en het nummer maakt het gemakkelijk te zien welke bestanden eerst worden gelezen. Het kiezen van een laag nummer (zoals 10, hierboven) betekent dat je bestand wordt gelezen v\u00f3\u00f3r de system rules files.</p> <p>Nu moet je een lijn aan het bestand toevoegen die je apparaat vertegenwoordigt. Als het bestand al bestond (van een eerder toegevoegd apparaat op deze manier), kun je alle inhoud laten zoals die is en gewoon een lijn onderaan toevoegen. De lijn die je moet toevoegen is: <pre><code>ATTRS{idVendor}==\"4348\", ATTRS{idProduct}==\"55e0\", MODE=\"666\", GROUP=\"plugdev\"\n</code></pre> Opmerking: In oudere Ubuntu/Linux-installaties moet je 'ATTRS' mogelijk vervangen door 'SYSFS'.</p> <p>Vul natuurlijk je eigen Vendor ID en Product ID in! (hoewel de bovenstaande correct zouden moeten zijn voor het <code>LANA-TNY-01</code> bordje). Sla het bestand op en sluit het. Nu moet je Linux opdracht geven om de udev-regels opnieuw te laden: <pre><code>$ sudo udevadm trigger\n</code></pre> Elk lid van de plugdev groep zou nu <code>wchisp</code> moeten kunnen uitvoeren zonder gebruik van <code>sudo</code>.</p> <p>Probeer opnieuw te flashen in Embeetle IDE. Als het niet werkt, trek dan de LANA-module eruit en sluit hem opnieuw aan op je computer terwijl je de <code>BOOT</code>-knop ingedrukt houdt (laat de knop een paar seconden na het aansluiten op de computer los), om ervoor te zorgen dat het echt in \"bootloader-modus\" is. Als het nog steeds niet werkt, aarzel dan niet om contact met ons op te nemen:  - E-mail: kristof@embeetle.com  - Whatsapp: +32(0) 496 90 75 44  - Discord: @kristof-at-embeetle</p> <p> </p>"},{"location":"communicator/programming/#mounriver-studio","title":"Mounriver Studio","text":"<p>Mounriver is een IDE gebaseerd op eclipse, uitgebracht door de chipmaker WCH. Dit werkt op Windows en er is een versie voor Linux en mogelijk ook voor Mac, maar de laatste twee lopen een beetje achter. Mounriver geeft ook vaak foutieve virusmeldingen op veel systemen en schendt de GPL-licentievoorwaarden van de GCC Compiler.</p> <p> </p>"},{"location":"communicator/programming/#opmerkingen-over-de-lana-module","title":"Opmerkingen over de LANA-module","text":"<p>Als je zelf aan de slag gaat met de LANA TNY, moet je op \u00e9\u00e9n ding letten (ongeacht de IDE): LANA heeft geen externe klok en moet de interne klok (HSI) gebruiken, dit wordt ook vermeld in de standaard sketch van Embeetle. Als je per ongeluk je LANA board \"brickt\", kun je deze meestal debricken via USB of door gebruik te maken van de power reset-functie van de WCHISPTool.</p>"},{"location":"esphome/","title":"ESPHome documentatie","text":"<p>Deze pagina bevat de refentie code voor elke onderdeel op de badge. We gaan er van uit dat je esphome reeds ge\u00efnstalleerd hebt en vertrouwd bent met het toevoegen van een toestel.</p>"},{"location":"esphome/#gemeenschappelijke-code","title":"Gemeenschappelijke code","text":"<pre><code>substitutions:\n  esphome_name: fri3d2024\n\nesphome:\n  name: ${esphome_name}\n\nesp32:\n  board: esp32-s3-devkitc-1\n  framework:\n    type: arduino\n</code></pre>"},{"location":"esphome/#scherm","title":"Scherm","text":"<pre><code>spi:\n  clk_pin: GPIO7\n  mosi_pin: GPIO6\n\ndisplay:\n  - platform: ili9xxx\n    model: ST7789V\n    dimensions:\n      height: 240\n      width: 296\n    transform:\n      swap_xy: true\n      mirror_x: false\n    data_rate: 80MHz\n    dc_pin: GPIO4\n    cs_pin: GPIO5\n    reset_pin: GPIO48\n    auto_clear_enabled: false\n    lambda: |-\n      it.image(0, 0, id(my_image));\n#      it.print(0, 0, id(my_font), \"Hello World!\");\n#      it.printf(0, 15, id(my_font), TextAlign::BASELINE_LEFT, \"%.1f graden\", id(temperature).state);\n# sensor.living_room_temperature\n#      it.line(0, 0, 50, 50);\n\nfont:\n  - file: \"opensans.ttf\"\n    id: my_font\n    size: 20\n\nimage:\n  - file: \"fri3d.png\"\n    id: my_image\n    type: RGB24\n</code></pre> <p>TODO</p> <ul> <li>refresh log error</li> </ul>"},{"location":"esphome/#status-led","title":"Status LED","text":"<pre><code>light:\n  - platform: status_led\n    name: \"State\"\n    id: \"state\"\n    pin: GPIO21\n</code></pre>"},{"location":"esphome/#rgb-leds","title":"RGB LEDs","text":"<pre><code>light:\n  - platform: neopixelbus\n    type: GRB\n    variant: WS2812\n    pin: GPIO12\n    num_leds: 5\n    name: \"NeoPixel Light\"\n</code></pre>"},{"location":"esphome/#drukknoppen","title":"Drukknoppen","text":"<pre><code>binary_sensor:\n  - platform: gpio\n    pin:\n      number: GPIO39\n      mode:\n        input: true\n        pullup: true\n      inverted: true\n    name: \"A\"\n  - platform: gpio\n    pin:\n      number: GPIO40\n      mode:\n        input: true\n        pullup: true\n      inverted: true\n    name: \"B\"\n  - platform: gpio\n    pin:\n      number: GPIO38\n      mode:\n        input: true\n        pullup: true\n      inverted: true\n    name: \"X\"\n  - platform: gpio\n    pin:\n      number: GPIO41\n      mode:\n        input: true\n        pullup: true\n      inverted: true\n    name: \"Y\"\n  - platform: gpio\n    pin:\n      number: GPIO45\n      mode:\n        input: true\n        pullup: true\n      inverted: true\n    name: \"menu\"\n  - platform: gpio\n    pin:\n      number: GPIO0\n      mode:\n        input: true\n        #pullup: true\n      inverted: true\n    name: \"start\"\n</code></pre>"},{"location":"esphome/#joystick","title":"Joystick","text":"<pre><code>sensor:\n  - platform: adc\n    id: joystick_x\n    name: \"Joystick X axis\"\n    pin: GPIO01\n    internal: True\n    attenuation: auto\n    update_interval: 500ms\n\n  - platform: adc\n    id: joystick_y\n    name: \"Joystick Y axis\"\n    pin: GPIO03\n    internal: True\n    attenuation: 11db\n    update_interval: 500ms\n</code></pre> <p>TODO</p> <ul> <li>disable logging</li> <li>on_xxx: left/right &amp; up/down</li> </ul>"},{"location":"esphome/#zoemer","title":"Zoemer","text":"<p>TODO</p> <ul> <li>test</li> </ul>"},{"location":"esphome/#accelerometer","title":"Accelerometer","text":"<pre><code>i2c:\n  sda: GPIO9\n  scl: GPIO18\n  scan: true\n  id: bus_i2c\n</code></pre> <p>TODO</p> <ul> <li>contribute code &amp; test</li> </ul>"},{"location":"esphome/#ir-ontvanger","title":"IR Ontvanger","text":"<pre><code>remote_receiver:\n  pin:\n    number: GPIO11\n    inverted: true\n    mode:\n      input: true\n      pullup: true\n  dump: all\n</code></pre> <p>TODO</p> <ul> <li>test</li> </ul>"},{"location":"esphome/#batterij-monitor","title":"Batterij monitor","text":"<p>TODO</p> <ul> <li>test</li> </ul>"},{"location":"esphome/#aux-power","title":"AUX power","text":"<p>TODO</p> <ul> <li>test</li> </ul>"},{"location":"esphome/#sd-kaart","title":"SD Kaart","text":"<p>TODO</p> <ul> <li>define use case</li> </ul>"},{"location":"flamingo/","title":"Big Flamingo Gun 9000","text":"<p>Om je Flamingo Gun te doen werken, moet je door twee fases: - Hardware: assembleer de hardware (solderen). - Software: flash de firmware (embedded software) naar de LANA module op je Flamingo Gun.</p> <p>De hardware assemblage proces is uitgelegd op deze pagina. Voor de software verwijzen we naar deze pagina.</p> <p> </p>"},{"location":"flamingo/#hardware","title":"HARDWARE","text":""},{"location":"flamingo/#kenmerken","title":"Kenmerken","text":"<p>De flamingo blaster is opgebouwd rond volgende basiscomponenten:</p> <ul> <li>een IR LED</li> <li>2 IR-ontvangers</li> <li>4 WS2812 LED's</li> <li>RISC-V-gebaseerd microcontrollerbord LANA TNY</li> </ul> <p></p>"},{"location":"flamingo/#stapsgewijze-montagehandleiding","title":"Stapsgewijze montagehandleiding","text":""},{"location":"flamingo/#alle-componenten-netjes-verpakt","title":"Alle componenten netjes verpakt","text":"<p>Het pakket dat u hebt ontvangen, bevat alles wat u nodig hebt om uw eigen flamingo blaster te bouwen.</p> <ul> <li>1 IR LED</li> <li>1 team selector switch</li> <li>1 grote blauwe condensator</li> <li>1 buzzer</li> <li>1 trigger pushbutton</li> <li>1 lange strip pin headers (in twee\u00ebn te splitsen)</li> <li>1 enkele pin header</li> <li>1 MOSFET</li> <li>1 LANA TNY</li> <li>1 roze PCB</li> <li>1 badge link kabel</li> <li>2 IR ontvangers</li> <li>2 weerstanden</li> <li>2 badge link connectoren</li> <li>3 gele condensatoren (100nF)</li> <li>4 WS2812 LED's</li> </ul> <p></p>"},{"location":"flamingo/#begin-met-solderen","title":"Begin met solderen","text":"<p>Er is geen verkeerde volgorde om de onderdelen te solderen, maar we raden aan om eerst met de laagste componenten te beginnen.</p>"},{"location":"flamingo/#weerstanden","title":"Weerstanden","text":"<p>Het pakket bevat een grotere 33R weerstand en een kleinere 1k weerstand. Soldeer ze op de aangegeven plek op het bord. Zie de foto hieronder.</p> <p></p>"},{"location":"flamingo/#teamschakelaar-en-luidspreker","title":"Teamschakelaar en luidspreker","text":"<p>De volgende componenten met een laag profiel zijn de zoemer en de teamschakelaar. De zoemer heeft geen polariteit. Monteer de schakelaar met de actuator weg van de PCB (= de printplaat waarop je aan het solderen bent) gericht. Zet ze op de plek zoals aangegeven op de foto.</p> <p></p>"},{"location":"flamingo/#ir-led","title":"IR-LED","text":"<p>De infrarood-LED heeft wel een polariteit. Als u hem verkeerd om monteert, werkt de blaster niet. De lange pin van de LED moet in het vierkante gat met het <code>+</code> symbool ernaast. Zorg ervoor dat u wat ruimte overlaat om de LED naar voren te buigen (of nog beter, buig hem voordat u hem soldeert, zoals op de foto!)</p> <p></p> <p></p>"},{"location":"flamingo/#ir-ontvangers","title":"IR-ontvangers","text":"<p>De montagerichtingen van de 2 IR-ontvangers worden aangegeven door een pijl. Deze pijl wijst in de richting van de gaatjes waarin de pinnen moeten gaan (zie foto).</p> <p></p> <p></p>"},{"location":"flamingo/#rgb-leds","title":"RGB-LED's","text":"<p>De RGB-LED's hebben 4 aansluitingen, de langste aansluiting moet in het gat met de letter <code>c</code>. Buig de LED na het plaatsen maar voor u gaat solderen. Zo kunt u de uitlijning enigszins aanpassen voordat u ze op hun plaats bevestigt.</p> <p></p> <p></p>"},{"location":"flamingo/#triggerknop","title":"Triggerknop","text":"<p>Als u rechtshandig bent, soldeert u de drukknop aan de zijkant met alle andere componenten. Als u linkshandig bent soldeer je de drukknop in dezelfde gaten aan de kant zonder componenten.</p> <p></p>"},{"location":"flamingo/#lana-tny-module","title":"LANA TNY-module","text":"<p>Gebruik de grote en de losse enkele pinheader om de LANA TNY-module te solderen. Breek de lange pinheader in 2 voor de zijkanten. Plaats de pinnen in de flamingo en lijn de LANA-module er bovenop uit. Soldeer de pinnen afwisselend om te voorkomen dat de pinheader smelt.</p> <p></p> <p></p>"},{"location":"flamingo/#condensatoren","title":"Condensatoren","text":"<p>De grote blauwe condensator, net als de IR-LED, heeft een lange pin die de anode van dit onderdeel aangeeft. Deze langere pin moet in het gat met het <code>+</code> symbool worden geplaatst.</p> <p>De kleinere gele condensatoren hebben geen polariteit en kunnen op beide manieren worden gemonteerd. Soldeer ze op de aangegeven plaats (zie foto).</p> <p></p> <p></p>"},{"location":"flamingo/#badge-linkconnector","title":"Badge-linkconnector","text":"<p>Het laatste onderdeel is de badge-linkconnector. Deze 3,5 mm audio-aansluiting is aan dezelfde kant gesoldeerd als alle andere componenten</p> <p></p>"},{"location":"flamingo/#afgewerkte-blaster","title":"Afgewerkte blaster","text":"<p>Als alles volgens plan verloopt, zou u nu een functionele blaster moeten hebben.</p> <p></p>"},{"location":"flamingo/#monteer-de-connector-op-uw-badge","title":"Monteer de connector op uw badge","text":"<p>Nu hoeft u alleen nog maar de badge-linkconnector aan uw badge toe te voegen. Monteer deze connector aan de achterkant van de badge (dezelfde kant als de draadloze module en de batterij).</p> <p></p> <p></p> <p>Let op dat er geen kortsluiting is tussen de voorste pin en de decoratie van de badge! Soldeer fijn en met minimaal soldeersel! (zie foto)</p> <p></p>"},{"location":"flamingo/#opmerkingen","title":"Opmerkingen","text":"<p>Hardware-ontwerpbestanden en firmware zijn te vinden in de GitHub-repository.</p> <p> </p>"},{"location":"flamingo/#software-firmware","title":"SOFTWARE (FIRMWARE)","text":"<p>Normaal zou de firmware al op je LANA module geflashed moeten zijn. Echter, als het niet zou werken: je kan de firmware flashen aan de <code>badge flash station</code> in de soldeer area.</p> <p>Als je wil, kan je de firmware ook zelf flashen met je eigen laptop. Bijvoorbeeld mocht je de firmware willen updaten of zelf aanpassingen willen maken. De instructies vind je op deze pagina.</p>"},{"location":"flamingo/programming/","title":"De LANA Module Programmeren","text":"<p>Om de LANA module op je <code>blaster</code> (flamingo) te programmeren, kun je zowel Embeetle IDE als Mounriver Studio gebruiken.</p> <p> </p>"},{"location":"flamingo/programming/#embeetle-ide","title":"Embeetle IDE","text":"<p>Embeetle is een IDE van Belgische makelij. De LANA kan worden geprogrammeerd via USB-C-aansluiting, maar ook met de WCH-Link debugger, wat extra debug-mogelijkheden biedt. Klik hier voor de volledige documentatie over hoe je de LANA module in Embeetle kunt programmeren. De onderstaande stappen zijn een quick start guide om je LANA module via de USB-C-poort te programmeren.</p> <p> </p>"},{"location":"flamingo/programming/#stap-1-download-embeetle-ide","title":"STAP 1: Download Embeetle IDE","text":"<p>Download eerst Embeetle:  - https://embeetle.com/downloads</p> <p>Je kunt het downloaden voor zowel Windows als Linux. We hebben nog geen ondersteuning voor MAC.</p> <p></p> <p> </p>"},{"location":"flamingo/programming/#stap-2-start-het-lana-tny-01-blaster-2024-project","title":"STAP 2: Start het <code>lana-tny-01-blaster-2024</code> project","text":"<p>Start Embeetle en klik op 'CREATE PROJECT':</p> <p></p> <p>  Selecteer vervolgens <code>WCH</code> als chip fabrikant en zoek naar het project <code>lana-tny-01-blaster-2024</code>:</p> <p></p> <p>  Klik onderaan op <code>CREATE</code>. Embeetle IDE zal het project en ook alle benodigde tools automatisch downloaden. Dan opent het project:</p> <p></p> <p> </p>"},{"location":"flamingo/programming/#stap-3-plug-het-bordje-in","title":"STAP 3: Plug het bordje in","text":"<p>DRUK EERST op de <code>BOOT</code>-knop en SLUIT DAN je bordje aan op de computer met een USB-C-kabel (terwijl je de <code>BOOT</code>-knop ingedrukt houdt):</p> <p></p> <p>Wanneer het bordje is aangesloten, kun je de <code>BOOT</code>-knop loslaten. Deze procedure zorgt ervoor dat je bordje in \"bootloader-modus\" komt. Dit betekent dat de microcontroller klaar is om nieuwe firmware te ontvangen!</p> <p> </p>"},{"location":"flamingo/programming/#stap-4-flash-de-firmware","title":"STAP 4: Flash de firmware","text":"<p>Klik nu op de <code>flash</code>-knop bovenaan in Embeetle IDE. Embeetle zal proberen de firmware naar de LANA module te flashen. Echter, je kunt nu de volgende foutmelding krijgen: <pre><code>Failed to open USB device: Bus 001 Device 008: ID 4348:55e0\nError: Failed to open USB device on Windows\n</code></pre> Op Linux kun je een ander probleem tegenkomen: <pre><code>Failed to open USB device: Bus 003 Device 010: ID 4348:55e0\nError: Failed to open USB device on Linux due to no enough permission\n</code></pre> Hieronder is de oplossing.</p> <p> </p>"},{"location":"flamingo/programming/#stap-5a-installeer-zadig-alleen-windows","title":"STAP 5a: Installeer Zadig (alleen Windows)","text":"<p>Je moet Zadig installeren en de driver voor het USB-apparaat vervangen door de WinUSB-driver. Download eerst Zadig: </p> <p></p> <p>  Open vervolgens Zadig en selecteer Options -&gt; List All Devices:</p> <p></p> <p>  Selecteer USB Module uit de list of devices en kies WinUSB als driver. Klik vervolgens op Replace Driver:</p> <p></p> <p>  Wacht tot de driver-installatie is voltooid:</p> <p></p> <p>  Succes:</p> <p></p> <p>  Probeer het opnieuw in Embeetle IDE. Het zou nu moeten werken:</p> <pre><code>\"C:/Users/krist/EMBEETLE IDE/embeetle/beetle_tools/windows/wchisp_0.2.2_64b/wchisp.exe\" flash application.elf\n14:57:06 [INFO] Chip: CH32V203G6U6[0x3619] (Code Flash: 32KiB)\n14:57:06 [INFO] Chip UID: CD-AB-19-97-D0-BC-B6-FF\n14:57:06 [INFO] BTVER(bootloader ver): 02.70\n14:57:06 [INFO] Code Flash protected: false\n14:57:06 [INFO] Current config registers: a55aff0000ff00ffffffffff00020700cdab1997d0bcb6ff\nRDPR_USER: 0x00FF5AA5\n  [7:0]   RDPR 0xA5 (0b10100101)\n    `- Unprotected\n  [16:16] IWDG_SW 0x1 (0b1)\n    `- IWDG enabled by the software, and disabled by hardware\n  [17:17] STOP_RST 0x1 (0b1)\n    `- Disable\n  [18:18] STANDBY_RST 0x1 (0b1)\n    `- Disable, entering standby-mode without RST\n  [23:22] SRAM_CODE_MODE 0x3 (0b11)\n    `- CODE-228KB + RAM-32KB / CODE-160KB + RAM-32KB depending on the chip\nDATA: 0xFF00FF00\n  [7:0]   DATA0 0x0 (0b0)\n  [23:16] DATA1 0x0 (0b0)\nWRP: 0xFFFFFFFF\n  `- Unprotected\n14:57:06 [INFO] Read application.elf as ELF format\n14:57:06 [INFO] Found loadable segment, physical address: 0x00000000, virtual address: 0x00000000, flags: 0x5\n14:57:06 [INFO] Section names: [\".init\", \".vector\", \".text\"]\n14:57:06 [INFO] Found loadable segment, physical address: 0x00000dbc, virtual address: 0x20000000, flags: 0x6\n14:57:06 [INFO] Section names: [\".data\"]\n14:57:06 [INFO] Firmware size: 4096\n14:57:06 [INFO] Erasing...\n14:57:06 [WARN] erase_code: set min number of erased sectors to 8\n14:57:06 [INFO] Erased 8 code flash sectors\n14:57:07 [INFO] Erase done\n14:57:07 [INFO] Writing to code flash...\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 4096/409614:57:07 [INFO] Code flash 4096 bytes written\n14:57:08 [INFO] Verifying...\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 4096/409614:57:08 [INFO] Verify OK\n14:57:08 [INFO] Now reset device and skip any communication errors\n14:57:08 [INFO] Device reset\n</code></pre> <p>Als het niet werkte, trek dan de LANA-module eruit en sluit hem opnieuw aan op je computer terwijl je de <code>BOOT</code>-knop ingedrukt houdt (laat de knop een paar seconden na het aansluiten op de computer los), om ervoor te zorgen dat het echt in \"bootloader-modus\" is. Als het nog steeds niet werkt, aarzel dan niet om contact met ons op te nemen:  - E-mail: kristof@embeetle.com  - Whatsapp: +32(0) 496 90 75 44  - Discord: @kristof-at-embeetle</p> <p> </p>"},{"location":"flamingo/programming/#stap-5b-voeg-apparaat-toe-aan-plugdev-groep-alleen-linux","title":"STAP 5b: Voeg apparaat toe aan plugdev groep (alleen Linux)","text":"<p>Op Linux moet je het apparaat toevoegen aan de plugdev groep. Controleer eerst de groepen die gekoppeld zijn aan de huidige gebruiker: <pre><code>$ groups whoami\nkristof : kristof adm cdrom sudo dip plugdev lpadmin lxd sambashare\n</code></pre> Als <code>plugdev</code> niet is vermeld, voeg dan de huidige gebruiker toe aan die groep:  <pre><code>$ sudo useradd -G plugdev whoami\n</code></pre> Bepaal de Vendor ID en Product ID van je apparaat met het <code>$ lsusb</code> commando:  <pre><code>$ lsusb\nBus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\nBus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub\nBus 003 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\nBus 003 Device 002: ID 046d:c548 Logitech, Inc. Logi Bolt Receiver\nBus 003 Device 003: ID 1a40:0101 Terminus Technology Inc. Hub\nBus 003 Device 004: ID 04f2:b75c Chicony Electronics Co., Ltd FHD Webcam\nBus 003 Device 005: ID 1a2c:4324 China Resource Semico Co., Ltd USB Keyboard\nBus 003 Device 006: ID 048d:6005 Integrated Technology Express, Inc. ITE Device(8291)\nBus 003 Device 007: ID 1bcf:2701 Sunplus Innovation Technology Inc. HD 720P webcam\nBus 003 Device 008: ID 048d:ce00 Integrated Technology Express, Inc. ITE Device(8291)\nBus 003 Device 009: ID 8087:0026 Intel Corp. AX201 Bluetooth\nBus 003 Device 011: ID 4348:55e0 WinChipHead\nBus 004 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub\nBus 004 Device 002: ID 0bda:0316 Realtek Semiconductor Corp. Card Reader\n</code></pre> Zoek naar de lijn met <code>WinChipHead</code> (derde van onder). Zoals je kunt zien, bestaat de ID voor mijn apparaat uit twee 4-cijferige hex-getallen: <code>ID 4348:55e0</code>. De eerste is de Vendor ID, de tweede de Product ID. Verwissel ze niet!</p> <p>Navigeer in de console naar <code>/etc/udev/rules.d</code> en lijst de inhoud van de directory: <pre><code>$ cd /etc/udev/rules.d\n$ ls\n70-snap.core.rules\n70-snap.firefox.rules\n70-snap.snap-store.rules\n</code></pre> Maak een nieuw bestand aan, bijvoorbeeld met de gedit-editor:  <pre><code>$ sudo gedit 10-probe.rules\n</code></pre> Je kunt dit bestand een willekeurige naam geven, zolang het maar eindigt op <code>.rules</code>. Rules files beginnen bij conventie met een nummer. Linux behandelt rules files in lexicale volgorde, en het nummer maakt het gemakkelijk te zien welke bestanden eerst worden gelezen. Het kiezen van een laag nummer (zoals 10, hierboven) betekent dat je bestand wordt gelezen v\u00f3\u00f3r de system rules files.</p> <p>Nu moet je een lijn aan het bestand toevoegen die je apparaat vertegenwoordigt. Als het bestand al bestond (van een eerder toegevoegd apparaat op deze manier), kun je alle inhoud laten zoals die is en gewoon een lijn onderaan toevoegen. De lijn die je moet toevoegen is: <pre><code>ATTRS{idVendor}==\"4348\", ATTRS{idProduct}==\"55e0\", MODE=\"666\", GROUP=\"plugdev\"\n</code></pre> Opmerking: In oudere Ubuntu/Linux-installaties moet je 'ATTRS' mogelijk vervangen door 'SYSFS'.</p> <p>Vul natuurlijk je eigen Vendor ID en Product ID in! (hoewel de bovenstaande correct zouden moeten zijn voor het <code>LANA-TNY-01</code> bordje). Sla het bestand op en sluit het. Nu moet je Linux opdracht geven om de udev-regels opnieuw te laden: <pre><code>$ sudo udevadm trigger\n</code></pre> Elk lid van de plugdev groep zou nu <code>wchisp</code> moeten kunnen uitvoeren zonder gebruik van <code>sudo</code>.</p> <p>Probeer opnieuw te flashen in Embeetle IDE. Als het niet werkt, trek dan de LANA-module eruit en sluit hem opnieuw aan op je computer terwijl je de <code>BOOT</code>-knop ingedrukt houdt (laat de knop een paar seconden na het aansluiten op de computer los), om ervoor te zorgen dat het echt in \"bootloader-modus\" is. Als het nog steeds niet werkt, aarzel dan niet om contact met ons op te nemen:  - E-mail: kristof@embeetle.com  - Whatsapp: +32(0) 496 90 75 44  - Discord: @kristof-at-embeetle</p> <p> </p>"},{"location":"flamingo/programming/#mounriver-studio","title":"Mounriver Studio","text":"<p>Mounriver is een IDE gebaseerd op eclipse, uitgebracht door de chipmaker WCH. Dit werkt op Windows en er is een versie voor Linux en mogelijk ook voor Mac, maar de laatste twee lopen een beetje achter. Mounriver geeft ook vaak foutieve virusmeldingen op veel systemen en schendt de GPL-licentievoorwaarden van de GCC Compiler.</p> <p> </p>"},{"location":"flamingo/programming/#opmerkingen-over-de-lana-module","title":"Opmerkingen over de LANA-module","text":"<p>Als je zelf aan de slag gaat met de blaster/LANA TNY, moet je op \u00e9\u00e9n ding letten (ongeacht de IDE): LANA heeft geen externe klok en moet de interne klok (HSI) gebruiken, dit wordt ook vermeld in de standaard sketch van Embeetle. Als je per ongeluk je LANA board \"brickt\", kun je deze meestal debricken via USB of door gebruik te maken van de power reset-functie van de WCHISPTool.</p>"},{"location":"micropython/","title":"MicroPython documentatie","text":"<p>NOG VERTALEN</p>"},{"location":"micropython/#flash-the-default-fri3d-micropython-firmware","title":"Flash the default fri3d micropython firmware","text":"<p>download firmware from https://github.com/cheops/fri3d-ota/tree/main/ota/fri3d_badge_2024 select the version and then the <code>*.zip</code> file in that folder</p> <p>flasher app  https://fri3d-flasher.vercel.app/#/</p> <p>If your download fails, you might have more success if you put the badge in DOWNLOAD mode manually: - PRESS + HOLD the START button - PRESS the RESET button (while HOLDING the START button) - the badge has now restarted in download mode</p> <p>after the download you might need to reset the badge to boot normally (PRESS the RESET button)</p>"},{"location":"micropython/#how-to-run-a-local-file","title":"How to run a local file","text":"<p>Install <code>mpremote</code> howto</p> <p>TLDR; <code>pip install mpremote</code></p> <p><pre><code>mpremote resume run local_test_file.py\n</code></pre> Unfortunately <code>Thonny</code> interrupts the startup of the badge when connecting, leaving some items (spi, display) in an undefined state. The same for <code>mpremote</code> if not supplied with the <code>resume</code> argument.</p>"},{"location":"micropython/#how-to-copy-a-file-to-the-badge","title":"how to copy a file to the badge","text":"<pre><code>mpremote resume fs cp local_path/file.jpg :file.jpg\n</code></pre>"},{"location":"micropython/#micropython-libraries","title":"Micropython libraries","text":"<p>Micropython quick reference for the esp32</p> <p>Micropython standard libraries overview doc</p> <p>The badge has lvgl built-in.</p> <p>Buttons demo demo_buttons.py</p> <p>Joystick demo demo_joystick.py</p> <p>Other interesting links - https://github.com/peterhinch/micropython-samples - https://github.com/mcauser/awesome-micropython</p>"},{"location":"micropython/#micropython-game-ideas","title":"micropython game ideas","text":"<ul> <li>https://hackaday.com/2021/05/25/simple-micropython-game-is-a-30-minute-game-dev-course/</li> <li>pinball link1 or link2</li> <li>gameESP</li> <li>snake</li> </ul>"},{"location":"micropython/lvgl/","title":"LVGL","text":"<p>badge_2024_micropython is gebouwd met LVLG v9.1 ingebakken.</p>"},{"location":"micropython/lvgl/#links","title":"links","text":"<ul> <li>lvgl homepage https://lvgl.io/</li> <li>lvgl documentatie https://docs.lvgl.io/9.1/</li> </ul>"},{"location":"micropython/lvgl/#python-voorbeelden-v84","title":"python voorbeelden (v8.4)","text":"<p>Spijtiggenoeg zijn de python voorbeelden niet meer beschikbaar voor v9.x Dit zijn de belangrijkste verschillen tussen v8.x en v9.x https://docs.lvgl.io/9.0/CHANGELOG.html en meer specifiek https://docs.lvgl.io/9.0/CHANGELOG.html#general-api-changes</p> <ul> <li>lvgl interactieve python voorbeelden (v8.4) https://docs.lvgl.io/8.4/examples.html</li> <li>lvgl python voorbeelden broncode (v8.4) (zoek voor *.py files) https://github.com/lvgl/lvgl/tree/v8.4.0/examples</li> </ul>"},{"location":"micropython/lvgl/#online-simulator","title":"Online simulator","text":"<p>Er is een online Micropython + lvgl (v9.0) simulator beschikbaar https://sim.lvgl.io/v9.0/micropython/ports/webassembly/index.html Dit is zeer handig om prototypes van nieuwe schermen te maken.</p>"},{"location":"micropython/lvgl/#simulator-examples","title":"Simulator Examples","text":""},{"location":"micropython/lvgl/#knop","title":"knop","text":"<pre><code># Initialize\nimport display_driver\nimport lvgl as lv\ndisp = lv.display_get_default()\ndisp.set_resolution(296,240)\n\n# Create a button with a label\nscr = lv.obj()\n\nbtn = lv.button(scr)\nbtn.align(lv.ALIGN.CENTER, 0, 0)\nlabel = lv.label(btn)\nlabel.set_text('Hello World!')\n\nlv.screen_load(scr)\n</code></pre>"},{"location":"micropython/lvgl/#knop-in-een-klasse-met-callback-onthouden-van-de-status","title":"knop in een klasse met callback, onthouden van de status","text":"<pre><code># Initialize\n\nimport display_driver\nimport lvgl as lv\n\ndisp = lv.display_get_default()\ndisp.set_resolution(296,240)\n\nclass CounterBtn:\n    def __init__(self):\n        screen = lv.screen_active()\n\n        screen.set_style_bg_color(lv.palette_darken(lv.PALETTE.GREY, 4), lv.PART.MAIN)\n\n        self.btn = lv.button(screen)\n        self.btn.align(lv.ALIGN.CENTER, 0, 0)\n\n        self.lbl = lv.label(self.btn)\n        self.lbl.set_text(\"Button\")\n\n        self.cnt = 0\n\n        self.btn.add_event_cb(self.btn_cb, lv.EVENT.ALL, None)\n\n    def btn_cb(self, evt):\n        code = evt.get_code()\n\n        if code == lv.EVENT.CLICKED:\n            self.cnt += 1\n            print(self.cnt)\n\n            self.lbl.set_text(\"Button: \" + str(self.cnt))\n\n\ncounter_btn = CounterBtn()\n</code></pre>"},{"location":"micropython/lvgl/#wifi-config-scherm","title":"wifi-config scherm","text":"<pre><code># Initialize\n\nimport display_driver\nimport lvgl as lv\n\ndisp = lv.display_get_default()\ndisp.set_resolution(296,240)\n\n\n\n\nclass TextArea:\n    def __init__(self, screen):\n        self._screen = screen\n        self.ta = lv.textarea(screen)\n        self.ta.add_event_cb(self._ta_event_cb, lv.EVENT.ALL, None)\n        self._kb = None\n\n    def _ta_event_cb(self, event):\n        code = event.get_code()\n\n        if code == lv.EVENT.CLICKED or code == lv.EVENT.FOCUSED:\n            if self._kb is None:\n                # create keyboard\n                self._kb = lv.keyboard(self._screen)\n                self._kb.set_size(self._screen.get_width(), int(self._screen.get_height()/2) )\n                self._kb.align_to(self.ta, lv.ALIGN.OUT_BOTTOM_MID, 0, 0)\n                self._kb.set_x(0)\n                self._kb.set_textarea(self.ta)\n                self._kb.add_event_cb(self._kb_event_cb, lv.EVENT.ALL, None)\n\n        elif code == lv.EVENT.DEFOCUSED:\n            if self._kb is not None:\n                self._kb.delete()\n                self._kb = None\n\n    def _kb_event_cb(self, event):\n        code = event.get_code()\n        if code == lv.EVENT.READY or code == lv.EVENT.CANCEL:\n            self.ta.send_event(lv.EVENT.DEFOCUSED, self.ta)\n\n\n\n\nclass ButtonLabel:\n    def __init__(self, screen, label, cb):\n        btn = lv.button(screen)\n        self.btn = btn\n        btn.set_height(30)\n        lbl = lv.label(btn)\n        lbl.set_text(label)\n        lbl.align(lv.ALIGN.CENTER, 0, 0)\n        btn.add_event_cb(self._bt_event_cb, lv.EVENT.CLICKED, None)\n        self.cb = cb\n\n    def _bt_event_cb(self, event):\n        # code = event.get_code()\n        self.cb()\n\n\n\nclass WifiScreen:\n    def __init__(self):\n        self._screen = lv.obj()\n        self._construct()\n\n    def load(self):\n        lv.screen_load(self._screen)\n\n    def _save_cb(self):\n        ssid = self.ss_ta.ta.get_text()\n        key = self.key_ta.ta.get_text()\n        print(f\"{ssid=}, {key=}\")\n        # TODO save\n\n    def _cancel_cb(self):\n        print(\"Cancel\")\n        #home_screen = fri3d.screens.home.HomeScreen()\n        #home_screen.load()\n\n    def _construct(self):\n        screen = self._screen\n\n        # title\n        title = lv.label(screen)\n        title.set_text(\"Wifi Configuration\")\n        title.align(lv.ALIGN.TOP_MID, 0, 0)\n\n        # ssid textarea\n        ss_ta = TextArea(screen)\n        self.ss_ta = ss_ta\n        ss_ta.ta.set_text(\"\")\n        ss_ta.ta.set_one_line(True)\n        ss_ta.ta.set_width(lv.pct(50))\n        ss_ta.ta.set_pos(100, 20)\n\n        # ssid label\n        ss_lbl = lv.label(screen)\n        ss_lbl.set_text(\"SSID:\")\n        ss_lbl.align_to(ss_ta.ta, lv.ALIGN.OUT_LEFT_MID, -5, 0)\n\n        # key textarea\n        key_ta = TextArea(screen)\n        self.key_ta = key_ta\n        key_ta.ta.set_text(\"\")\n        key_ta.ta.set_password_mode(True)\n        key_ta.ta.set_one_line(True)\n        key_ta.ta.set_width(lv.pct(50))\n        key_ta.ta.set_pos(100, 60)\n\n        # key label\n        key_lbl = lv.label(screen)\n        key_lbl.set_text(\"Key:\")\n        key_lbl.align_to(key_ta.ta, lv.ALIGN.OUT_LEFT_MID, -5, 0)\n\n        # save button\n        sv = ButtonLabel(screen, lv.SYMBOL.OK + \" Save\", self._save_cb)\n        sv.btn.align(lv.ALIGN.RIGHT_MID, -5, 0)\n\n        # cancel button\n        cancel = ButtonLabel(screen, lv.SYMBOL.CLOSE + \" Cancel\", self._cancel_cb)\n        cancel.btn.align(lv.ALIGN.LEFT_MID, 5, 0)\n\n\n\nw = WifiScreen()\nw.load()\n</code></pre>"},{"location":"micropython/lvgl/#canvas","title":"canvas","text":"<p>Rode rand rond een gouden achtergrond</p> <pre><code># Initialize\nimport display_driver\nimport lvgl as lv\ndisp = lv.display_get_default()\ndisp.set_resolution(296,240)\n\nscr = lv.screen_active()\n\nbuf = lv.draw_buf_create(scr.get_width(),scr.get_height(),lv.COLOR_FORMAT.RGB565, lv.STRIDE_AUTO)\ncanvas = lv.canvas(scr)\ncanvas.set_draw_buf(buf)\ncanvas.center()\n\nlayer = lv.layer_t()\ncanvas.init_layer(layer)\n\ndsc = lv.draw_rect_dsc_t()\ndsc.bg_color = lv.color_hex(0xffbf00)\ndsc.bg_opa = lv.OPA.COVER\n\ndsc.border_color = lv.palette_main(lv.PALETTE.RED)\ndsc.border_width = 2\ndsc.border_side = lv.BORDER_SIDE.TOP | lv.BORDER_SIDE.LEFT | lv.BORDER_SIDE.RIGHT | lv.BORDER_SIDE.BOTTOM\ndsc.border_opa = lv.OPA.COVER\n\ndsc.radius = 61\n\na = lv.area_t()\na.x1 = 0\na.y1 = 0\na.x2 = 295\na.y2 = 239\n\nlv.draw_rect(layer, dsc, a)\n\ncanvas.finish_layer(layer)\n</code></pre>"},{"location":"micropython/lvgl/#badge-voorbeelden","title":"Badge voorbeelden","text":""},{"location":"micropython/lvgl/#laad-een-png-afbeelding","title":"Laad een png afbeelding","text":"<pre><code># load fri3d_logo-min.png\npng = open('fri3d_logo-min.png', 'rb')\ndata = png.read()\npng.close()\n\nimg = lv.image(lv.screen_active())\n\nimgd = lv.image_dsc_t()\nimgd.header.cf = lv.COLOR_FORMAT.ARGB8888\nimgd.header.w = 240\nimgd.header.h = 240\nimgd.data = data\nimgd.data_size = len(data)\n\nimg.set_src(imgd)\n\nimg.align(lv.ALIGN.CENTER, 0, 0)\n</code></pre>"},{"location":"noisycricket/","title":"Noisy Cricket","text":""},{"location":"noisycricket/#montagefotos","title":"Montagefoto's","text":"<ol> <li> <p>Alle componenten netjes verpakt </p> </li> <li> <p>Uitgespreid in volgorde van solderen </p> </li> <li> <p>De componentzijde van de printplaat is waar het fri3d-logo staat</p> <ul> <li>33 Ohm (blauwe behuizing en oranje, oranje, zwarte kleurbanden) weerstand bovenaan</li> <li>120 Ohm (beige behuizing en zwarte, rode, zwarte kleurbanden) weerstand onderaan 2 weerstanden gesoldeerd </li> </ul> </li> <li> <p>NPN-transistor 2N3904 met platte kant naar links (achterkant van noisy cricket) </p> </li> <li> <p>Elektrolytische condensator (33 microFarad)    Let op de polariteit: lange poot is positief, korte poot is negatief, witte markering op de behuizing is negatief    Er zijn 2 gaten voor positief en 2 gaten voor negatief, kies de best passende.    </p> </li> <li> <p>Pinheader gesoldeerd aan de onderkant    2 orientaties zijn mogelijk:</p> <ul> <li>aan de onderkant: dit resulteert in een rechtopstaande positie wanneer gemonteerd op het fri3d2024-badge</li> <li>aan de achterkant: dit resulteert in een naar voren gerichte positie wanneer gemonteerd op het fri3d2024-badge </li> </ul> </li> <li> <p>Klaar om de LED te solderen    Let op de polariteit: lange poot is positief, korte poot is negatief, platte kant op de behuizing is negatief </p> </li> <li> <p>LED gesoldeerd    Let op de polariteit: positief (lange poot) aan de onderkant, negatief aan de bovenkant (korte poot, platte kant op de behuizing) </p> </li> <li> <p>Overzichtsfoto's van gesoldeerde Noisy Cricket </p> </li> <li> <p>Noisy Cricket gemonteerd op het fri3d2024-badge     Gemonteerd met de pinheader gesoldeerd aan de onderkant </p> <p>Gemonteerd met de pinheader gesoldeerd aan de achterkant </p> </li> </ol>"},{"location":"onboarding/firstupdate/","title":"Je eerste update","text":"<p>Met de meest rechtse schuifschakelaar op de badge, zet je hem aan. </p> <p>Als je de Fri3d badge voor de eerste keer opstart, kan je \"over the air\" (OTA) update starten. Gebruik de \"X\" en \"Y\" knoppen om tussen de knoppen op het scherm te wisselen.</p> <p></p> <p>gebruik de \"X\" of \"Y\" button om te bevestigen dat je online wil gaan. Dit werkt enkel op het Fri3d Camp netwerk.</p> <p></p> <p></p> <p>Selecteer de nieuwste versie -- niewer is altijd beter, niet? ;-)</p> <p></p> <p>Er zijn verschillende partities. De badge controleert ze allemaal en zal ze updaten indien nodig. Dit kan even duren.</p> <p></p> <p>Na de update herstart de badge automatisch.</p> <p></p> <p>Na de update is de optie \"hardware test\" verdwenen en staat er in de plaats \"MicroPython\"</p> <p></p> <p>Je badge is nu voorzien van de (voorlopig) laatste firmware</p>"},{"location":"onboarding/","title":"Onboarding documentatie","text":""},{"location":"onboarding/#badge","title":"Badge","text":"<p>Standaard software (\"Fri3d App\") kan je bedienen met de <code>X</code> (op), <code>Y</code> (neer), <code>A</code> (kies) &amp; <code>B</code> (terug) knoppen.</p> <ul> <li>OTA Update: hiermee kan je de laatste versie van de software installeren via Wi-Fi</li> <li>MicroPython: deze start MicroPython op</li> <li>Hardware test: een programma waarmee we elke badge getest hebben op werking</li> <li>Retro-Go Gaming: een emulator om Nintendo Entertainment System (NES), Gameboy, Gameboy Color en Doom games te kunnen spelen op de badge</li> </ul>"},{"location":"onboarding/#flamingo","title":"Flamingo","text":"<p>AKA BFG9000 (Big Flamingo Gun)</p> <p></p> <p>De flamingo kan je, eens deze gesoldeerd is, aansluiten op de badge en gebruiken. Geen verdere actie is vereist.</p>"},{"location":"onboarding/#mini-blaster","title":"Mini-blaster","text":"<p>AKA Noisy Cricket</p> <p></p> <p>Deze kleine SAO is te verkrijgen bij Team Badge tegen de kostprijs van 1 consumptie.</p>"},{"location":"onboarding/#communicator","title":"Communicator","text":"<p>Indien je hem niet aansluit op de badge, kan je de Communicator als USB Keyboard gebruiken. Als hem wel aansluit kan je gebruik maken van volgende functies:</p> <ul> <li>QWERTY toetsenbord met achtergrond verlichting ontworpen door Solder Party beschikbaar op UART</li> <li>TDK ICS43434 microfoon</li> <li>Analog Devices MAX98357A DAC met versterker verbonden aan een kleine luidspreker</li> </ul> <p>De toetsencombinaties om de verlichting aan en uit te zetten kan je terugvinden op de Communicator pagina.</p>"},{"location":"platformio/","title":"PlatformIO","text":""},{"location":"platformio/#visual-studio-code","title":"Visual Studio Code","text":"<p>Hier kan je VS Code downloaden: https://code.visualstudio.com/. Maak je geen zorgen als tijdens de installatie gevraagd wordt welke extensie je wil installeren. De nodige extensies kan je makkelijk achteraf installeren.</p>"},{"location":"platformio/#platformio-extensie","title":"PlatformIO extensie","text":"<ol> <li>In Visual Studio Code, ga naar de \"extensions\" tab. (CTRL+SHIFT+X)</li> <li>In de search bar, type \"platformio\"</li> <li>Installeer die met de oranje alien icon</li> </ol>"},{"location":"platformio/#hello-world","title":"Hello World","text":"<ol> <li>open het PlatformIO window (klik het alien icoon in de linker kolom)</li> <li>Kies \"New Project\"</li> <li>Als je het \"PlatformIO home\" window ziet, kan je ook op de \"+ new project\" knop klikken.</li> <li>Bij een nieuw project moet je <code>esp32-s3-devkitc-1</code> als board kiezen. PlatformIO zal nu een hoop libraries downloaden. Dat kan eventjes duren.</li> <li>Open platformio.ini - daar zou je het volgende moeten vinden:</li> </ol> <pre><code>    [env:esp32-s3-devkitc-1]\n    platform = espressif32\n    board = esp32-s3-devkitc-1\n    framework = arduino\n</code></pre> <ol> <li>voeg volgende lijntjes onderaan toe:</li> </ol> <pre><code>    board_build.arduino.memory_type = qio_opi\n    board_build.partitions = default_16MB.csv\n    board_upload.flash_size = 16MB\n    monitor_speed = 115200\n    lib_deps = bodmer/TFT_eSPI@^2.5.33\n    build_flags =\n        -DBOARD_HAS_PSRAM # N16R8V has PSRAM\n        -DARDUINO_USB_MODE=1 # necessary for serial port\n        -DARDUINO_USB_CDC_ON_BOOT=1 # necessary for serial port\n</code></pre>"},{"location":"platformio/#voorbeeld-code-in-github","title":"Voorbeeld code in GitHub","text":"<p>https://github.com/Fri3dCamp/badge_2024_arduino/tree/main/examples/platformio%20basic%20examples</p> <p>Om de hele mikmak te downloaden:</p> <ol> <li>Surf naar https://github.com/Fri3dCamp/badge_2024_arduino</li> <li>Klik \"Fork\"</li> <li>De hele repository staat nu identiek in je eigen account op github</li> <li>Klik op de groene knop <code>&lt;&gt; Code</code></li> <li>CTRL-C de URL die je vindt in de pop-up</li> <li>Open je Git Bash CLI in de folder waar je je code lokaal wil plaatsen</li> <li>Type <code>git clone</code> en CTRL-V URL from the Github repository</li> </ol>"},{"location":"platformio/#je-eigen-code-op-github","title":"Je eigen code op GitHub","text":"<ol> <li>Download GIT vanop https://git-scm.com/downloads</li> <li>Creeer je account op https://github.com</li> <li>Bovenaan het scherm, klik \"+\", dan \"New repository\"</li> <li>Volg de instructies op de GitHub pagina om de repository te clonen naar je eigen harde schijf.</li> <li>Coderen maar!</li> <li>Als je klaar bent, open de Git Bash CLI in de root folder van je repository</li> <li><code>git add .</code></li> <li><code>git commit -m \"cool new program\"</code></li> <li><code>git push</code></li> <li>Check op de Github website dat je nieuwe code is gearriveerd</li> </ol>"},{"location":"platformio/#jouw-code-op-de-fri3d-camp-repository","title":"Jouw code op de Fri3d Camp repository","text":"<ol> <li>Surf naar https://github.com/Fri3dCamp/badge_2024_arduino</li> <li>Klik \"Fork\"</li> <li>De hele repository staat nu identiek in je eigen account op github</li> <li>Klik op de groene knop <code>&lt;&gt; Code</code></li> <li>CTRL-C de URL die je vindt in de pop-up</li> <li>Open je Git Bash CLI in de folder waar je je code lokaal wil plaatsen</li> <li>Type <code>git clone</code> en CTRL-V URL from the Github repository</li> </ol> <p>Tot nu waren de instructies identiek aan het downloaden van de voorbeelden</p> <ol> <li>In github, klik <code>main</code> om een nieuwe branch aan te maken</li> <li>In de zoekbar, typ een nieuwe naam naar keuze, bv. <code>mijneigenvoorbeeld</code></li> <li>Klik <code>create branch mijneigenvoorbeeld from main</code></li> <li>Open de Git Bash CLI in de root van de folder van je repository</li> <li><code>git checkout -b newexample</code></li> <li>Maak nu de code/het project voor je eigen voorbeeld. Daarna:</li> <li><code>git add .</code></li> <li><code>git commit -m \"nieuw voorbeeld toegevoegd\"</code></li> <li><code>git push</code></li> <li>in GitHub, klik <code>compare and pull request</code></li> <li>Voeg een goede beschrijving toe van wat je voorbeeld doet,</li> <li>Klik <code>Create pull request</code></li> </ol>"},{"location":"sweet4x4/","title":"Sweet 4x4","text":""},{"location":"sweet4x4/#kenmerken","title":"Kenmerken","text":"<p>De Sweet 4x4 macropad is nu in zijn derde iteratie. Dit keer gebruik je een LANA TNY (of een ander XIAO / QtPy compatibel bord) als het hart van deze macropad. Je kunt kiezen voor 16 toetsen of 15 toetsen en een draaischakelaar.</p> <p></p>"},{"location":"sweet4x4/#stapsgewijze-montagegids","title":"Stapsgewijze montagegids","text":""},{"location":"sweet4x4/#overzicht","title":"Overzicht","text":"<p>Het pakket dat je hebt ontvangen bevat alles wat je nodig hebt om je eigen Sweet 4x4 te bouwen.</p> <ul> <li>15 sockets</li> <li>15 schakelaars</li> <li>16 diodes</li> <li>6 WS2812 LED's</li> <li>2 condensatoren</li> <li>1 LANA TNY</li> <li>1 roze printplaat</li> <li>Schroeven en afstandhouders <code>HOEVEEL?</code></li> </ul> <p></p>"},{"location":"sweet4x4/#sockets","title":"Sockets","text":"<p>Laten we beginnen met de laagste componenten, in dit geval de keysockets. Plaats de sockets in de gaten en soldeer de 2 SMD-pads aan de zijkanten vast. Doe dit 15 keer, tenzij je geen encoder wilt, dan kun je kiezen voor 16 sockets en toetsen. (Voor degenen die geen sockets willen, kun je ook je toetsen direct op de printplaat solderen.)</p> <p></p>"},{"location":"sweet4x4/#diodes","title":"Diodes","text":"<p>De 16 diodes moeten gebogen worden om goed op de printplaat te passen. De twee onderste hoeken zijn hiervoor ontworpen en speciaal bedoeld voor het buigen van deze onderdelen. Zodra alle diodes gebogen zijn, kun je beginnen met het solderen in de twee cirkels naast elkaar. De zwarte lijn op de diode (de kathode) moet naar buiten gericht zijn.</p> <p> </p>"},{"location":"sweet4x4/#lana-tny","title":"LANA TNY","text":"<p>Je kunt de LANA TNY module solderen met de meegeleverde doorvoerpennen OF je kunt het SMD solderen voor de laagste profieloplossing. Als je kiest voor de oppervlakmontage, kun je enkele pennen gebruiken om de module correct uit te lijnen voordat je het soldeert, zoals hieronder weergegeven.</p> <p></p>"},{"location":"sweet4x4/#ws2812-leds","title":"WS2812 LED's","text":"<p>Soldeer 6 WS2812 RGB-LED's aan de onderkant zoals aangegeven op de onderstaande afbeeldingen. Druk de LED's niet te ver naar beneden om schade aan de LED te voorkomen. Voorkom ook kortsluiting tussen de LED-pinnen en de SMD-sockets door de LED niet volledig naar de printplaat te buigen zoals weergegeven op de onderstaande afbeeldingen.</p> <p> </p>"},{"location":"sweet4x4/#condensatoren","title":"Condensatoren","text":"<p>Om de totale hoogte van het toetsenbord te verminderen, moet je de condensator buigen voordat je hem soldeert.</p> <p></p>"},{"location":"sweet4x4/#encoder","title":"Encoder","text":"<p>Als je een draaischakelaar wilt, plaats deze dan in de linkerbovenhoek van de toetsenmatrix en soldeer de 7 pinnen (5 kleinere en 2 grotere). De grotere pinnen, die voor mechanische sterkte worden gebruikt, kunnen veel soldeer nodig hebben om de gaten te vullen.</p> <p></p>"},{"location":"sweet4x4/#schakelaars","title":"Schakelaars","text":"<p><code>PLAATS AFBEELDING MET DE PLEXI-PLAAT</code></p>"},{"location":"sweet4x4/#behuizing","title":"Behuizing","text":"<p>Schroeven? Afstandhouders? Plexi?</p>"},{"location":"sweet4x4/#keycaps","title":"Keycaps","text":"<p>Klik de keycaps van jouw keuze erop.</p> <p></p>"},{"location":"sweet4x4/#n-key-rollover","title":"N-key rollover","text":"<p>Een toetsenbord met n-key rollover, of afgekort NKRO, heeft de mogelijkheid om elke toets afzonderlijk te scannen, in plaats van dat de pc dit doet. Hierdoor wordt elke ingedrukte toets geregistreerd, zelfs als je meerdere toetsen tegelijkertijd indrukt.</p> <p>Soms zie je het \"n\" in n-key rollover vervangen door een getal. Dat getal vertelt je hoeveel toetsen je tegelijkertijd kunt indrukken terwijl het toetsenbord deze registreert. Bijvoorbeeld, als je toetsenbord 6-key rollover heeft, kun je zes toetsen tegelijk indrukken met succesvolle invoer. N-key rollover is vooral relevant/nuttig voor gaming toetsenborden.</p> <p>Niet alle toetsenborden hebben n-key rollover, omdat het implementeren van deze functie bepaalde kosten en ontwerpuitdagingen met zich meebrengt.</p> <p>Om n-key rollover op deze macropad mogelijk te maken, breek je de 2 bovenste hoeken af om de kortsluiting te verbreken en gebruik je de diodes.</p>"},{"location":"sweet4x4/#firmware","title":"Firmware","text":"<p><code>PLAATS INFO</code></p>"}]}